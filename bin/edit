#!/usr/bin/env perl
use String::ShellQuote;
use strict;

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl ddebug-mode p:protocol='$ENV{REMOTEPROTOCOL}'
## end code-generator
## start generated code
use Getopt::Long;

my $debug_mode = 0;
my $protocol = "$ENV{REMOTEPROTOCOL}";

GetOptions (
            'debug-mode|d!' => \$debug_mode,
            'protocol|p=s' => \$protocol,
            'help|h!' => \&handler_help,
           );



sub handler_help {
  print ;
  print "\n\n选项和参数：\n";
  printf "%6s", '-d, ';
  printf "%-24s", '--[no]debug-mode';
  if (length('--[no]debug-mode') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";
  printf "%6s", '-p, ';
  printf "%-24s", '--protocol=PROTOCOL';
  if (length('--protocol=PROTOCOL') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
  }
  printf "%s", ;
  print "\n";

  exit(0);
}

## end generated code


my $log_;
if ($debug_mode) {
  open ($log_, ">", glob("~/.cache/system-config/logs/edit.log")) or die "Can not open log file";
  print $log_ "will edit: @ARGV\n";
  print STDERR "will edit: @ARGV\n";
}


sub debug(@) {
  if ($debug_mode) {
    print $log_ "@_\n";
    print STDERR "@_\n";
  }
}

if (@ARGV == 3 and $ARGV[1] eq "line" and $ARGV[2] =~ m/^\d+\.?$/) {
  chop $ARGV[0] if $ARGV[0] =~ m/,$/;
  chop $ARGV[2] if $ARGV[2] =~ m/\.$/;
  system("e", "$ARGV[0]:$ARGV[2]");
  exit;
}

if (@ARGV > 1 and $0 =~ m!(^|/)e$!) {
  map {$_ = shell_quote($_)} @ARGV;
  chomp(my $file = qx(select-file-from-where @ARGV));
  @ARGV = ($file);
}

if ($ARGV[0] =~ m/^\+\d+$/) {
  my $line = substr($ARGV[0], 1);
  shift @ARGV;
  $ARGV[0] .= ":$line";
}

my ($myfile) = ($ARGV[0]);
shift @ARGV;
my $remote_ip = $ENV{"REMOTEIP"};


if ($remote_ip) {
  if (not $protocol) {
    $protocol = qx(get-remote-edit-protocol $remote_ip);
  }

  if ($ENV{REMOTEUSER}) {
    $remote_ip = "$ENV{REMOTEUSER}\@$remote_ip";
  }
}


my @emacsclient = ('emacs.client', '-n');

my $do_wait = 0;
if ($0 =~ m,/?edit-wait$, or $0 =~ m,/?ew$,) {
  @emacsclient = ('emacs.client');
  $do_wait = 1;
}

if ($ENV{REMOTEIP} eq "127.0.0.1") {
  @emacsclient = ('emacs', '-nw', '-q');
}

sub get_emacs_file_name($) {
  my ($file) = @_;
  if ($ENV{"REMOTEIP"} and $ENV{REMOTEIP} ne "127.0.0.1") {
    if ($ENV{PS1HOSTNAME} and $ENV{LOCALIP} =~ m/^\d+\.\d+\.\d+\.\d+/) {
      debug "using $ENV{PS1HOSTNAME} as my local ip";
      $ENV{LOCALIP}=$ENV{PS1HOSTNAME};
    }

    if ($ENV{USER} eq 'root' and $ENV{REALUSER}) {
      my ($myname, $myip, $myport) = @ENV{"REALUSER", "LOCALIP", "LOCALPORT"};
      if ($myport eq "def") {
        return "/$protocol:$myname\@$myip|sudo:root\@$myip:$file";
      }
      return "/$protocol:$myname\@$myip#$myport|sudo:root\@$myip#$myport:$file";
    }
    my ($myname, $myip, $myport) = @ENV{"USER", "LOCALIP", "LOCALPORT"};
    if ($protocol eq "pscp") {
      # plink on win7 has a bug, can't handle ip connection, only hostname
      # works
      $myip = qx(ip-hosts $myip);
    }

    if ($myport eq "def") {
      return "/$protocol:$myname\@$myip:$file";
    }
    return "/$protocol:$myname\@$myip#$myport:$file";
  } else {
    return $file;
  }
}

sub edit_1($) {
  my $file=$_[0];
  $file =~ s,.*file://,,;

  if (-e $file) {
    if (-e $file) {
      my $file = shell_quote($file);
      chomp($file = qx(readlink -f $file));
      if ($file =~ m!/Maildir/[^/]*/cur/! and not $do_wait) {
        debug "working with $file";
        $file = shell_quote($file);
        chomp(my $gnus_link = qx(maildir-get-id $file));
        # $gnus_link = shell_quote($gnus_link);
        if ($gnus_link) {
          system("find-or-exec emacs");
          system("emacsclient", "-e", sprintf('(org-open-link-from-string "%s")', $gnus_link));
          exit 0;
        } else {
          system("bhj-notify hello 'This mail has no link'")
        }
      } elsif ($file =~ m,/src/gerrit-fetch-review/, and system("yes-or-no-p", "Do you want to edit gerrit-review file") != 0) {
        print "Please double check your edit file, should not be under ~/src/gerrit-fetch-review";
        exit;
      }
    }

    if ((! -r $file or ! -w $file) && $ENV{USER} ne "root") {
      my $fileq = shell_quote($file);
      my $user = qx(stat -c %U $fileq);
      my $action ="readable";
      if (-r $file) {
        $action = "writable";
      }
      if ($user ne $ENV{USER} and system("yes-or-no-p -y 'file not $action, use root?'") == 0) {
        system("sudoedit", $file);
        exit;
      }
      if (! -d $file and ! -r $file) {
        exit;
      }
    }

    my $file_q = $file = shell_quote($file);
    chomp($file_q = qx(lookup-file -e -r -- $file));
    if (not $file_q) {
      chomp ($file_q = qx(lookup-file -r -- $file));
    }
    debug "file_q is $file_q";
    return (@emacsclient, get_emacs_file_name($file_q));

  } else {

    debug "file $file not exist";

    # external/opencore/android/mediascanner.cpp:622: error: invalid conversion from ‘const char*’ to ‘char*’
    $file =~ m,^[a|b]/, and $file = substr($file, 2); # for git diff output
    $file =~ m,:$, and chop($file);

    my $line=1;
    $file =~ s,:(\d+(:\d+)?)$,, and $line = $1;

    if (`uname` =~ m/cygwin/i) {
      $file = shell_quote($file);
      $file = `cygpath -u $file`;
      chomp($file);
    }

    my $file_q = $file = shell_quote($file);
    chomp($file_q = qx(select-output-line -- lookup-file -e -r -- $file));
    if (not $file_q or not -e $file_q) {
      chomp($file_q = qx(select-output-line -- lookup-file -r -- $file));
    }
    return (@emacsclient, "+$line", get_emacs_file_name($file_q));

  }
}

if ($remote_ip and $ENV{REMOTEIP} ne "127.0.0.1") {
  my @cmd = edit_1($myfile);
  $cmd[-1] = shell_quote($cmd[-1]);

  my $ssh_cmd = join(" ", @cmd);

  $ssh_cmd = <<EOC;
. ~/.config/system-config/.bashrc-path
$ssh_cmd
EOC
  debug "ssh cmd is $ssh_cmd";

  $ssh_cmd = shell_quote($ssh_cmd);
  debug "ssh $remote_ip $ssh_cmd";
  my $remote_port = ($ENV{REMOTEPORT} or 22);
  my $res = system("ssh -o StrictHostKeyChecking=no $ENV{REMOTE_EXTRA_SSH_ARGS} $remote_ip -p $remote_port $ssh_cmd");
  exit $res unless @ARGV;
} else {
  my @cmd = edit_1($myfile);

  debug "will run: @cmd";

  system("find-or-exec emacs emacs.bhj");
  while (1) {
    my $ret = system(@cmd);
    if ($ret != 0) {
      debug "ret is", $ret >> 8, "and", $ret & 0xff;
      if ($ret == 2) {
        die "@cmd got interrupt";
      }
      warn("ret is $ret for @cmd");
      if (system("sleep 5") == 2) {
        die "@cmd got interrupt while sleeping"
      }
    } else {
      last;
    }
  }
}

while (@ARGV) {
  my $arg = shell_quote(shift @ARGV);
  while (system("$0 $arg") != 0) {
    if (system("sleep 1") == 2) {
      die "e $arg got interrupt while sleeping"
    }
  }
}
