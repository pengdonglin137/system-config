#!/bin/bash
set -e
saved_args=("$@")
notify-error() {
    if is-jenkins; then
        echo "${saved_args[@]}" | mail-cms -e -o -i -s "git-get failed in $(jenkins-info)"
    fi
}

. aterr notify-error

## start code-generator "^\\s *#\\s *"
# generate-getopt d:dir u:url b:branch r:reference c:create @:clone-args @single-branch @mirror='("" --mirror)'
## end code-generator
## start generated code
TEMP=$( getopt -o b:c:d:r:u:h \
               --long branch:,clone-args:,create:,dir:,mirror,reference:,single-branch,url:,help,no-mirror,no-single-branch \
               -n $(basename -- $0) -- "$@")
branch=
clone_args=
create=
dir=
mirror=
reference=
single_branch=false
url=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -b|--branch)
            branch=$2
            shift 2
            ;;
        --clone-args)
            clone_args=$2
            shift 2
            ;;
        -c|--create)
            create=$2
            shift 2
            ;;
        -d|--dir)
            dir=$2
            shift 2
            ;;
        --mirror|--no-mirror)
            if test "$1" = --no-mirror; then
                mirror=
            else
                mirror=--mirror
            fi
            shift
            ;;
        -r|--reference)
            reference=$2
            shift 2
            ;;
        --single-branch|--no-single-branch)
            if test "$1" = --no-single-branch; then
                single_branch=false
            else
                single_branch=true
            fi
            shift
            ;;
        -u|--url)
            url=$2
            shift 2
            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-b, '
            printf %-24s '--branch=BRANCH'
            echo
            printf "%06s" " "
            printf %-24s '--clone-args=CLONE_ARGS'
            echo
            printf %06s '-c, '
            printf %-24s '--create=CREATE'
            echo
            printf %06s '-d, '
            printf %-24s '--dir=DIR'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]mirror'
            echo
            printf %06s '-r, '
            printf %-24s '--reference=REFERENCE'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]single-branch'
            echo
            printf %06s '-u, '
            printf %-24s '--url=URL'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

branch=${branch:-master}


if test -z "$dir" -o -z "$url"; then
    die "Error: Usage $(basename $0) -d LOCAL_DIR -u REMOTE_GIT_URL"
fi

valid-git-dir() {
    local dir=$1
    if test -d "$dir"/.git || [[ $dir =~ \.git$ ]]; then
        if (
            cd "$dir"
            git log -1
        ) >/dev/null 2>&1; then
            return 0;
        else
            echo "你的 $dir git 仓库目录好像有点问题，可能需要重新创建"
            sleep 1
        fi
    fi
    return 1
}

if ! valid-git-dir "$dir"; then
    rm -rf "$dir"
fi

if test ! -d $dir; then
    (
        . aterr rm -rf "$dir"
        mkdir -p $dir
        cd $dir
        if ! git clone $clone_args $mirror --single-branch -b $branch $url . $(if test -d "$reference"; then echo --reference "$reference"; fi) && # --single-branch fails for s:git-repo
                ! git clone $clone_args $mirror -b $branch $url . $(if test -d "$reference"; then echo --reference "$reference"; fi); then

            if test "$create" = true; then
                git init .
                git commit -m 'init commit' --allow-empty --author 'qualcomm <someone@qualcomm.com>'
                git push $url HEAD:refs/heads/$branch
                rm .git -rf
                git clone --single-branch -b $branch $url .
            else
                die "无法从 $url git clone 到 $dir 目录，请检查一下 1. $dir 目录是否已损坏，删除试试？ 2. 是否拥有 $url 仓库代码权限"
            fi
        fi
    )
else
    if ! (
            cd $dir
            if test "$(git config remote.origin.url)" != "$url"; then
                git remote remove origin || true
                git remote add origin $url
            fi
            if test "$mirror"; then
                git config remote.origin.fetch '+refs/heads/*:refs/heads/*'
            else
                git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
            fi
            if test "$single_branch" = true; then
                git fetch -v origin $branch
            else
                git fetch -v origin
            fi
            if test -z "$mirror"; then
                git reset --hard || true
                git clean -xfd || true
                git checkout -B $branch origin/$branch
            fi
        ); then
        die "从 $url 更新代码到 $dir 目录失败，请检查一下 1. $dir 目录是否已损坏，删除试试？ 2. 是否拥有 $url 仓库代码权限"
    fi
fi
