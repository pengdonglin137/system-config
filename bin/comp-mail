#!/bin/bash

if test -e ~/src/github/smartcm/etc/ldap.rc; then
    . ~/src/github/smartcm/etc/ldap.rc >/dev/null 2>&1
fi

## start code-generator "^\\s *#\\s *"
    # generate-getopt u:user='$(get-about-me ldap-user)' \
        # p:pass='$(get-authinfo -p "请输入 ldap 管理员账号密码" -h 127.0.0.1 -u $(get-about-me ldap-user))' \
        # ddecode g:glob='"*"'
## end code-generator
## start generated code
TEMP=$( getopt -o dg:p:u:h \
               --long decode,glob:,pass:,user:,help,no-decode \
               -n $(basename -- $0) -- "$@")
declare decode=false
declare glob="*"
declare pass=$(get-authinfo -p "请输入 ldap 管理员账号密码" -h 127.0.0.1 -u $(get-about-me ldap-user))
declare user=$(get-about-me ldap-user)
eval set -- "$TEMP"
while true; do
    case "$1" in

        -d|--decode|--no-decode)
            if test "$1" = --no-decode; then
                decode=false
            else
                decode=true
            fi
            shift

            ;;
        -g|--glob)
            glob=$2
            shift 2

            ;;
        -p|--pass)
            pass=$2
            shift 2

            ;;
        -u|--user)
            user=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-d, '
            printf %-24s '--[no-]decode'
            echo
            printf %06s '-g, '
            printf %-24s '--glob=GLOB'
            echo
            printf %06s '-p, '
            printf %-24s '--pass=PASS...'
            echo
            printf %06s '-u, '
            printf %-24s '--user=USER...'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code


test $# = 0 && { echo "Usage: $(basename $0) match1 [match2] [[--] disp1 disp2 ... ]"; exit; }
matches=()
matches_done=false
disps=()

while test $# != 0; do
    if test ${#matches[@]} = 2 -o "$1" = --; then
        matches_done=true
    fi
    if test $matches_done = false; then
        matches=("${matches[@]}" "$1")
    else
        test "$1" != -- && disps=("${disps[@]}" "$1")
    fi
    shift
done

set -- "${matches[@]}"

if test $# = 1; then
    if [[ "$1" =~ = ]]; then
        query=$1
    else
        query=$(printf "(|(sAMAccountName=${glob}%s${glob})(cn=${glob}%s${glob})(sn=${glob}%s${glob})(mail=${glob}%s${glob}))" "$1" "$1" "$1" "$1")
    fi
elif test $# = 2; then
    query='(|'
    f='sn mail givenName'
    for x in $f; do
        for y in $f; do
            test $x = $y && continue;
            query=$(printf '%s(&(%s=*%s*)(%s=*%s*))' "$query" $x $1 $y $2)
            done
        done
    query=$query')'
fi

function get-display() {
    perl -ne '
BEGIN{
    @f = @ARGV;
    @ARGV=();
    $str = "";
    $mail_str = "";

    sub print_it() {
        if ($mail_str) {
            print "$mail_str";
            if ($str) {
                print ":$str\n";
            }
            print "\n";
        }
    }
}

END {
    print_it;
}

chomp;
if (m/^dn: /) { # restart
    print_it;
    $str = "";
    $mail_str = "";
} elsif (m/^displayName: (.*)$/) {
    $mail_str = "\"$1\" $mail_str";
} elsif (m/^mail: (.*)$/) {
    $mail_str = "$mail_str<$1>";
} else {
    m/(.*?): (.*)/ or next;
    ($key, $val) = ($1, $2);
    for $f (@f) {
        if ($key =~ m/$f/i) {
            $str = "$str\n($key: $val)"
        }
    }
}
' "${disps[@]}"
}

function maybe-decode() {
    if test $decode = true; then
        decode-ldap-output
    else
        cat
    fi
}

function maybe-filter() {
    if test -x ~/.local-config/bin/comp-mail-filter; then
        ~/.local-config/bin/comp-mail-filter
    else
        cat
    fi
}

ldapsearch -LLL -b "$(get-about-me ldap-dc)" \
    -P 3 \
    -H "$(get-about-me ldap-url)" \
    -D "$user" \
    -w "$pass" "$query" |
    maybe-decode |
    maybe-filter
