#!/bin/bash
set -e
. ~/system-config/bin/set-ssh-agent
if test "$DEBUG" = true; then
    set -x
fi

function die() {
    echo Error: "$@"
    exit -1
}

export -f die


## start code-generator "^\\s *#\\s *"
# generate-getopt nno-submodule aadd_it fforce-even-if-merged=\${force_even_if_merged:-false}
## end code-generator
## start generated code
TEMP=$(getopt -o anfh \
              --long add_it,no-submodule,force-even-if-merged,help,no-add_it,no-no-submodule,no-force-even-if-merged \
              -n $(basename -- $0) -- "$@")
add_it=false
no_submodule=false
force_even_if_merged=${force_even_if_merged:-false}
eval set -- "$TEMP"
while true; do
    case "$1" in

        -a|--add_it|--no-add_it)
            if test "$1" = --no-add_it; then
                add_it=false
            else
                add_it=true
            fi
            shift
            ;;
        -n|--no-submodule|--no-no-submodule)
            if test "$1" = --no-no-submodule; then
                no_submodule=false
            else
                no_submodule=true
            fi
            shift
            ;;
        -f|--force-even-if-merged|--no-force-even-if-merged)
            if test "$1" = --no-force-even-if-merged; then
                force_even_if_merged=false
            else
                force_even_if_merged=true
            fi
            shift
            ;;
        -h|--help)
            set +x
            echo
            echo
            echo Options and arguments:
            printf %06s '-a, '
            printf %-24s '--[no-]add_it'
            echo
            printf %06s '-f, '
            printf %-24s '--[no-]force-even-if-merged'
            echo
            printf %06s '-n, '
            printf %-24s '--[no-]no-submodule'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

export force_even_if_merged

if test "$add_it" = true; then
    export GIT_NON_INTERACTIVE_ADD=true
fi

if test "$GIT_NON_INTERACTIVE_ADD" = true; then
    function git-interactive-add() {
        (
            cd $(lookup-file -e .git/..)
            git add .
        )
    }
    export -f git-interactive-add
else
    function git-interactive-add() {
        (
            unset -f git git_svn
            command git-interactive-add
        )
    }
    export -f git-interactive-add
fi

if test "$SC_GITX_DONE" != true; then
    . ~/system-config/bin/.gitx
    export -f git
    export -f git_svn
    export SC_GITX_DONE=true
fi

(
    flock 9
    d2u ~/.netrc
) 9< ~/system-config/bin/.gitx

if test "$SC_NOT_REPO" != true; then
    if lookup-file -e .repo/manifest.xml >/dev/null 2>&1; then
        export SC_NOT_REPO=false
    else
        export SC_NOT_REPO=true
    fi
fi

if test "$SC_NOT_REPO" = false; then
    git-interactive-add
    git commit -s
    if yes-or-no-p -y "push for review?"; then
        gerrit-push-review baohaojun
        gerrit-do-review
    else
        git push $(repo-remote) HEAD:$(repo-branch)
    fi
    exit
fi

test "$(pwd)" = $HOME && cd ~/system-config
cd "$(dirname "$(lookup-file -e .git)")"

if ! [[ $PWD =~ /system-config(/|$)|/src/github/ ]]; then
    die "Can only use it in ~/system-config or ~/src/github/ repos"
fi

if test "$force_even_if_merged" = false &&
        test ! -e .git/sc-not-merged &&
        ! git submodule foreach 'if test -e .git/sc-not-merged; then echo yes.hello.world; fi' | grep yes.hello.world -q; then
    exit
fi

if test -e .git-push-rebase-hooks; then
    bash .git-push-rebase-hooks
fi

if test ! "$(wgit symbolic-ref --short HEAD)"; then
    (
        if test ! -e .git/sc-not-merged; then
            exit 0
        fi

        if git-is-ancestor master HEAD; then
            command git checkout -B master
        elif git-is-ancestor HEAD master; then
            command git checkout master
        else
            die HEAD not setup correctly, please check $PWD
        fi
   )
fi

if test "$ADD_DONE" != true; then
    git-interactive-add
else
    git add .
fi

if output=$(
        if test "$no_submodule" = true; then
            exit 1 # not 0!
        fi
        cmd=$(
            cat <<'EOF'
echo doing it in $PWD 1>&2
function do_it() {
    ADD_DONE=true git-push-rebase "$@" || echo hello $(pwd) failed
}
if test "$REMOTEIP" = 127.0.0.1 || test -d blog/ -a -d css/; then
    IS_TTY_IO=true do_it -a
else
    do_it&
fi
EOF
           )
        git submodule foreach bash -c "$cmd" 2>&1 |
        tee /dev/stderr |
        grep "^hello.*failed$"
    )
then
    echo "$PWD failed: $output"
    exit -1
else
    true
fi

function get-tags()
{
    local tags=()
    local tag=()
    existing_tags=$(find meta/tags/ -type d -exec basename '{}' \;)
    while true; do
        tag=$(select-output-line -p "select tags for $x" -- bash -c "echo done; echo new; arg1-arg2 \"$existing_tags\" \"$(echo ${tags[@]})\" ")
        if test $tag = done; then
            if test "${#tags[@]}" = 0; then
                read -e -p "Must specifi at least one tag, press any key to continue... "
                continue
            else
                echo "${tags[@]}"
                return
            fi
        fi
        tags=("${tags[@]}" $tag)
    done
}

if test -e ".do-blog"; then
    (
        for x in *.org; do
            test -f "$x" || continue
            mkdir -p blog/$(today|perl -npe 's!-!/!g')
            git mv $x blog/$(today|perl -npe 's!-!/!g')/ ||
            mv $x blog/$(today|perl -npe 's!-!/!g')/
            git add blog/$(today|perl -npe 's!-!/!g')/$x
        done
    )
    org_changes=$(git st -S|cut -b 4-|grep -e '\.org$' | grep -v meta/tags || true)
    for x in $org_changes; do
        if test -e $x; then
            if ! git log "${x/%.org/.html}" 2>/dev/null |grep . && ! EMACS=t yes-or-no-p -y "Publish $x?"; then
                perl -npe 's!^(\Q#+title:\E.*)!$1\n#+Html: <p style="color: red;"> <b>Not finished yet.</b> </p>!' -i $x
            fi
        fi
    done

    git add $org_changes
    for x in $org_changes; do
        if test -e $x; then
            emoji-to-unicode.pl $x > $x.$$
            if diff -q $x $x.$$; then
                rm $x.$$
            else
                mv $x.$$ $x
                if ! is-tty-io; then
                    die "Can't do git-interactive-add when it's not tty"
                fi
                git-interactive-add $x
            fi

            ./fix-links.pl $x
            if grep -i %3D -- $x && yes-or-no-p -y "Fix all %3D as ="; then
                perl -npe 's/(\[\[[^]]*%3D[^]]*\])/join("=", split("%3D", $1))/eg' -i $x
                git-interactive-add $x
            fi
            if ! grep 'bhj-tags:' $x && [[ "$x" =~ /blog/ ]]; then
                tags=$(get-tags $x)
                echo "# bhj-tags: $tags" >> $x
            fi

            org-export $x

            if grep -e '<sub>' "${x/%.org/.html}"; then
                yes-or-no-p "Do you think the above <sub>s are expected?"
            fi
            if test -e "$(basename $x|perl -npe 's/\.org$/.html/')" && [[ "$x" =~ blog/ ]]; then
                if git st -s "$(basename $x|perl -npe 's/\.org$/.html/')" | grep -P -q -e '^\?\?'; then
                    rm "$(basename $x|perl -npe 's/\.org$/.html/')"
                elif test "$(basename "$x")" != index.org; then
                    ./rebuild-old-html.pl "$x"
                fi
            fi
        fi
    done
    if test "$org_changes"; then
        generate-atom.xml.sh
    fi
    last_org=$(find blog -name '*.org'|sort -n|tail -n 1)
    if git st -s "$last_org" | grep .; then
        ./rebuild-old-html.pl "$last_org"
        mv "$(basename "$last_org" | perl -npe 's/\.org$/.html/')" index.html
    fi

    if git st -S | grep . ; then
        git-interactive-add
        if test "$GIT_NON_INTERACTIVE_ADD" = true || yes-or-no-p -y "Continue?"; then
            find-or-exec konsole
            true
        fi
    fi

    if git st -s |grep -e '^A\|^.A\|^D\|^.D'; then
        ./meta/generate-archives.sh
    fi

    git add .
    if git diff HEAD -- $org_changes | grep -P -e '^(-|\+).*bhj-tag'; then
        ./generate-tags.sh
    fi
fi

git add .

if git status -s | grep . ; then
    git commit -s -m "$(
        if test -e .default-commit-msg -a ! -e .commit-msg-bhj; then
            cat .default-commit-msg
            exit
        fi
        (
            if test -e .commit-msg-bhj; then
                cat .commit-msg-bhj | sort-commit-msgs
                rm .commit-msg-bhj
            fi
            echo "###start of comment###"
            echo in $(pwd):
            echo -e "remotes:\n$(git remote -v|pn 2|sort -u)"
            git diff -w HEAD | perl -npe 's,^diff --git ,* ,'
            LOCAL=Local
            cat <<EOF

# $LOCAL Variables: #
# mode:org #
# End: #
EOF
        ) > /tmp/$(basename $0).$$
        get-stdin /tmp/$(basename $0).$$
        rm /tmp/$(basename $0).$$
    )" ||true # " to fix the font-lock...
fi

branch=$(wgit symbolic-ref --short HEAD) || true
if test ! "$branch"; then
    branch=master
fi

if test -e ~/system-config/etc/branch-fileters/$(relative-path $PWD ~/system-config).sh; then
  branch=$(bash ~/system-config/etc/branch-fileters/$(relative-path $PWD ~/system-config).sh my-master)
fi

if test "$(wgit symbolic-ref --short HEAD)" != $branch; then
    if git-is-ancestor $branch HEAD; then
        git checkout -B $branch
    fi
fi

origin=$(repo-remote)
if [[ "$(repo-remote-url $origin)" =~ https?://github.com/baohaojun ]]; then
    git remote set-url $origin $(repo-remote-url $origin|perl -npe 's,https?://github.com/baohaojun,git\@github.com:baohaojun,')
fi

if test "$force_even_if_merged" != true && ! test -e .git/sc-not-merged; then
    if test "$PWD" = ~/system-config; then
        bash ~/system-config/.after-push-hook
    fi
    exit
fi

if git-is-ancestor HEAD $origin/$branch; then
    git checkout -B $branch $origin/$branch
    exit
fi

if [[ "$(repo-remote-url $origin)" =~ github.com.baohaojun ]]; then
    git merge $origin/$branch
fi
(
    if test -e ~/.local-config/etc/personal-projects; then
        export BHJ_GIT_ALL_IN_ONE=true
    . ~/.local-config/etc/personal-projects
    fi
)

(
    set -o pipefail
    for try in $(seq 1 3); do
        if timeout $((10 * try)) git push $origin HEAD:refs/heads/$branch 2>&1 | tee .git/sc-git-push.log; then
            exit 0
        fi
        if grep 'fetch first|non-fast-forward' -P .git/sc-git-push.log; then
            git fetch $(repo-remote)
            myscr -n push-$(bp) -w '
                git-interactive-add -b "$(git merge-base $(repo-remote-branch) HEAD)" -r "$(repo-remote-branch)";
                if yes-or-no-p "Merge?"; then
                    git merge $(repo-remote-branch);
                fi'
        fi
        echo try $try failed in $PWD
        if test "$try" = 1 && tsocks1 git push $origin HEAD:refs/heads/$branch; then
            exit 0
        fi
        sleep $((5 * try))

    done
    tsocks1 git push $origin HEAD:refs/heads/$branch;
) || {
    bhj-notify git-push-rebase "you need to merge it in $PWD" >/dev/null 2>&1
    die "you need to merge it!"
}
if test -e .after-push-hook; then
    bash .after-push-hook
fi

if test -e ~/.local-config/bin/system-config-git-merged; then
    system-config-git-merged
fi

if test $(pwd) = ~/system-config; then
    (
        cd ~/.local-config/bin
        git pull
    ) >/dev/null 2>&1&
fi

exit 0;
