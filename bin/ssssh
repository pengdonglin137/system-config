#!/bin/bash
host=$1

if test -z "$host"; then
    host=$(select-output-line -o 'for x in ~/.local-config/.ssssh/search-*; do echo ${x##*/search-}; done')
    if test -z "${host}"; then
        exit 0
    fi
fi

if test ! -e ~/.local-config/.ssssh/search-$host; then
    bhj-notify hello "host $host not found in .ssssh"
    if EMACS=t yes-or-no-p -n "Add $host to ~/.local-config/.ssssh?"; then
        cat <<EOF > ~/.local-config/.ssssh/search-$host
regexp='bhj@$host\s'
name=$host
EOF
    else
        exit
    fi
fi

regexp=
name=
command=

. ~/.local-config/.ssssh/search-$host
if test -e ~/.local-config/.ssssh/exec-$host; then
    . ~/.local-config/.ssssh/exec-$host
fi

search=$regexp
if test "$host" = localhost; then
    search=$USER@$HOSTNAME
fi

find-or-exec konsole
if test -z "$search"; then
    bhj-notify "hello" "nothing to search for $host"
    exit
fi

function window_text_match() {
    current_window_text=$(sawfish-get-screen-shot)
    last_user_host=$(echo "$current_window_text"|grep @|tail -n 1 || true)
    if echo "$last_user_host"| grep -P -q -e "$search"; then
        if echo "$current_window_text" | grep -P '\S' | tail -n 1 | grep '(^|:.*)\$$' -P; then
            return 0
        elif yes-or-no-p -n "使用当前窗口吗？好像正在运行别的程序呢？"; then
            return 0
        else
            return 2
        fi
    elif echo "$current_window_text" | grep -P -q -e "$search"; then
        return 2 # We connected to this site, should not use
    elif echo "$current_window_text" | grep @; then
        return 1
    else
        return 2
    fi
}

if window_text_match; then
    exit
fi

if test "$SC_USE_TMUX" = true; then
    tmux list-windows | (
        while read n current_name rest; do
            # EMACS=t yes-or-no-p "hello: $n $current_name $rest"
            if test "${current_name%[*-]}" = "$name"; then
                window_n=${n%:}
                tmux select-window -t "$window_n"
                if window_text_match; then
                    exit 0
                elif test $? = 1 && yes-or-no-p -y "Use this window whose name matches?"; then
                    user_at_host=$(
                        echo "$current_window_text" | grep -o '\S+@[^ \t:]+[\s:]' -P | tail -n 1
                                )

                    if yes-or-no-p -y "update the regexp: $user_at_host?"; then
                        cat <<EOF > ~/.local-config/.ssssh/search-$host
regexp='$user_at_host'
name=$host
EOF
                    fi
                    exit 0
                fi
            fi
        done
        exit 1
    ) && exit
fi

echo "$current_window_text" > ~/tmp/1.txt
bhj-notify "hello" "$search not found"

export SCREEN_TITLE=$name
if test "$command"; then
    myscr $command
elif test "$host" = localhost; then
    myscr bash
else
    if test ! -e ~/.config/system-config/is-realhome && ! [[ $host =~ js ]]; then
        if test "$host" = Smartisan; then
            host='-D 9090 Smartisan'
        elif test "$host" = realhome-pc; then
            export extra_env='REMOTEIP=Smartisan-localhost REMOTEPORT=10711 LOCALIP=realhome-pc LOCALPORT=33333'
        fi
        if [[ $host =~ -p[0-9]+$ ]]; then
            port_arg=$(echo $host|perl -npe 's/.*-p/-p/')
            host=$(echo $host|perl -npe 's/-p\d+$//')
        else
            port_arg=
        fi
        if test -z "${ssss_exec}"; then
            ssss_exec="exec bash"
        fi
        myscr en_US ssh -X -o RequestTTY=true $host $port_arg "REMOTEUSER=$USER LOCALIP=${host#*@} $extra_env REMOTEPROTOCOL=ssh $ssss_exec"
    else
        # 默认的机器都是运行这个路径
        myscr ssh-work $host $ssss_exec
    fi
fi
