#!/bin/bash

set -e

cat <<'EOF' | grep -v "sh-mode%\}" -P
# {%sh-mode%}
#!/bin/bash
set -e

me=$(readlink -f $BASH_SOURCE)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $BASH_SOURCE)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi

abs0=$BASH_SOURCE
if ! [[ $abs0 =~ ^/ ]]; then
    if [[ $abs0 =~ / ]] && test -e $PWD/$abs0; then
        abs0=$PWD/$abs0
    elif test -e "$(which $BASH_SOURCE)"; then
        abs0=$(which $BASH_SOURCE)
    else
        die "Can't find abs path for $BASH_SOURCE"
    fi
fi

b0=$(basename $BASH_SOURCE)

repo_info_keys=(
    project path branch upstream remote revision
)

declare -A repo_info_keys_map
for x in ${repo_info_keys[@]}; do
    repo_info_keys_map[$x]=1
done

if test $# != 1; then
    die "Can only take 1 arg from: ${repo_info_keys[@]}"
elif test ! -v repo_info_keys_map[$1]; then
    die "arg $1 must be in ${repo_info_keys[@]}"
fi

repo_info_line=$(
    grep -P "^repo_dir=\Q$PWD\E;" $abs0
              )

eval "${repo_info_line}"
eval echo \$repo_$1
exit
# {%/sh-mode%}
EOF

repo_top_dir=$(lookup-file -e .repo/..)
cd ${repo_top_dir}

. repo-info-from-manifest

for repo_path in ${!repo_project_paths[@]}; do
    (
        echo "repo_dir=$PWD/${repo_path};"
        echo "repo_path=${repo_path};"
        for attr in branch revision upstream project remote; do
            echo "repo_$attr='${repo_xml_project_info_map[@$attr-$repo_path]}';"
        done
    ) | tr -d '\n'
    echo
done
