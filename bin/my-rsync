#!/bin/bash
function rsync() {
    local x
    local -a args=()
    local -a saved_args=("$@")
    local last_arg=${saved_args[$# - 1]}


    local n=0
    for x in "$@"; do
        ((n++)) || true
        if test "${x:0:1}" != -; then
            need_ask=false
            if test $n != $# -a "${x:${#x}-1}" = /; then
                need_ask=true
            fi
            if test $((n + 1)) = $# -a "${x:${#x}-1}" = / -a "${last_arg:0:1}" = -; then
                need_ask=false
            fi
            if test $need_ask = true && { test -d "$x" || yes-or-no-p -y "Remove the trailing / for $x?"; };  then
                if test -d "$x"; then
                    echo removing / from the end of $x 1>&2
                fi
                args=("${args[@]}" "${x%/}")
                continue
            fi
        fi
        scp=/scp:
        if test "${x:0:${#scp}}" = /scp:; then
            x=${x#/scp:}
        fi

        if [[ $x =~ \#[0-9]+: ]]; then
            ssh_port_args="ssh -p $(echo "${x}"|perl -ne 'm/#(\d+):/; print $1')"
            x=$(echo "${x}" | perl -pe 's/#\d+:/:/')
        else
            ssh_port_args=ssh
        fi
        args=("${args[@]}" "${x}")
    done
    set -- -e "${ssh_port_args}" "${args[@]}"
    command rsync "$@"
}

if test "$BASH_SOURCE" = "$0"; then
    # we are being run

    if [[ $1 =~ ^smb:// ]]; then
        x=~/smb/${1#smb://}
        shift
        set -- "$x" "$@"
    fi
    rsync "$@"
else
    # we are being sourced.
    return 0
fi
