#!/bin/bash
# [[file:~/src/github/android-documents/cm/ABC.org::the-ultimate-script][the-ultimate-script]]
# The name abc stands for Android Build Cake. Android Build is a piece
# of Cake.

# All bash scripts should start with ~set -e~ to fail early and loudly.
set -e

if test "$SYSTEM_CONFIG_INITED" != true; then
    . ~/system-config/.bashrc
fi

if test "$ABC_REMOTE_HOST" = ""; then
    export ABC_REMOTE_HOST=abc
fi

export USE_CCACHE=1

if test -e ~/src/github/projects/ABC.org -a ~/src/github/projects/ABC.org -nt ~/system-config/bin/abc; then
    emacsclient -e '
        (progn
         (save-some-buffers t)
         (find-file "~/src/github/projects/ABC.org")
         (org-babel-tangle))' 1>&2 && touch ~/system-config/bin/abc && exec $0 "$@"
fi

die() {
    (
        echo $(date): "($ABC_USER $SSH_ORIGINAL_COMMAND)"
        echo "    Error: $*"
        echo
    ) |
        (
            flock ~/.cache/system-config/logs/abc.err.lock tee -a ~/.cache/system-config/logs/abc.err.txt
        ) 1>&2
    exit -1
}

is-a-subdir() {
    dir1=$(readlink -f "$1")
    dir2=$(readlink -f "$2")
    # test if dir1 is in a subdir of $dir2
    dir2=$dir2/
    if test -e "$dir1" -a -d "$dir2"; then
        if test "$(echo "$dir1" | cut -b 1-${#dir2})" = "${dir2}"; then
            return 0;
        fi
    fi
    return 1
}

info() {
    if test $# = 0; then
        perl -npe 's/^/    /'
    else
        echo $(date): "$@"
    fi |
        (
            flock ~/.cache/system-config/logs/abc.info.lock tee -a ~/.cache/system-config/logs/abc.info.txt ~/.cache/system-config/logs/abc.info.txt.$$ >/dev/null 2>&1
            (
                rm -f ~/.cache/system-config/logs/abc.info.txt.$$
                cat
            ) < ~/.cache/system-config/logs/abc.info.txt.$$
        ) 1>&2
}
function killlock() { # can kill run-away abc tasks.
    get-base-build "$@"

    (
        cd "$base_build"
        dump1lock .abc.lock|
            while read pid ppid etime command; do
                if test "$ppid" = 1; then
                    echo will now kill $pid: $command
                    (
                        set -x
                        kill $pid
                        sleep 1
                        kill -9 $pid
                        sleep 1
                        ps $pid || true
                    )

                fi
            done
    )
}

get-base-build() {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l b:base
    ## end code-generator
    ## start generated code
    local base=
    local OPTIND=1
    while getopts 'b:' opt; do
        case "$opt" in
            b)    base=$OPTARG;;
            *)    echo Usage Error;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    base=${base%%/*}
    base_build=~/buildfarm/$base
    if test "$base" -a "$base" != .. -a -d "$base_build"; then
        true
    else
        die "Invalid base build: $base_build"
    fi
}

dump1lock() {
    if test $# != 1; then
        die "dump1lock usage error"
    fi
    if fuser "$1" >/dev/null 2>&1; then
        echo "These processes are using $1"
        (fuser "$1" |grep . || echo 1) |
            xargs ps -o pid,ppid,etime,command |
            cut -b 1-120 |
            perl -a -ne '
                if (1..1) {
                    print;
                    next;
                }
                chomp;
                printf "%-125s", $_;
                system("cat /proc/$F[0]/environ|tr \\\\0 \\\\n|grep ABC_USER|perl -npe \"s/.*=//\"")
            '

    fi
}

function dumpsys() { # dump the system state (e.g., who is locking the base build?)
    get-base-build "$@"
    (
        cd "$base_build"

        dump1lock .abc.lock
        for x in ???/.android-full-build.lock; do
            dump1lock $x
        done
        uptime
    )
}


function update_one_xml() {
    if test $# != 2; then
        die "Error: Usage $(basename $0) xml dir"
    fi

    xml=$1
    dir=$2

    exec 9> ~/buildfarm/.update-one-xml.lock;
    echo about to lock for $@
    flock 9
    echo locked $@

    function on-exit() {
        if test $? = 0; then
            ABC_USER=${ABC_USER:-chehejiacm@chehejia.com}
            if test "$RUNNING_IN_CRON" != true; then
                mail-cms -i -a "$ABC_USER" -s "你要求的 repo 索引（xml: $xml）已经创建完成" <<<"之后你可以使用 abc-x grep -b $dir 'HELLO WORLD' 进行搜索"
            fi
        else
            if test "$USER_INPUT_ERROR"; then
                ABC_USER=${ABC_USER:-baohaojun@chehejia.com}
            else
                ABC_USER=baohaojun@chehejia.com
                USER_INPUT_ERROR="未知错误，请查看 code3 上的 ~/tmp/nohup.out 文件"
            fi
            mail-cms -i -a "$ABC_USER" -s "未能正确为 $xml 创建 abc-x grep 的索引" <<< "$USER_INPUT_ERROR"
        fi
    }

    if test -d ~/buildfarm/"$dir"; then
        touch ~/buildfarm/"$dir" || true
        if test "$SMARTCM_ABC_FOR_DEV_BRANCH" = true; then
            touch ~/buildfarm/"$dir"/.repo/is-dev || true
        fi
    else
        . atexit on-exit
        mkdir -p ~/buildfarm/.cold/
        (
            if test -d ~/buildfarm/.cold/"$dir"; then
                if test "$SMARTCM_ABC_FOR_DEV_BRANCH" = true; then
                    touch ~/buildfarm/.cold/"$dir"/.repo/is-dev
                    exit
                fi
                tmpdir=~/buildfarm/.cold/"$dir"
            else
                set -x
                git-get -u ssh://gerrit.it.chehejia.com/qualcomm/platform/manifest.git -d ~/system-config/.git/repo-manifests -b sanfrancisco --single-branch

                if test ! -e ~/system-config/.git/repo-manifests/$xml; then
                    USER_INPUT_ERROR="指定的 xml 文件 $xml 在 ssh://gerrit.it.chehejia.com/qualcomm/platform/manifest.git （分支：sanfrancisco）下找不到"
                    die "Can't find $xml"
                fi

                tmpdir=~/buildfarm/.tmpdir/"$dir".$$
                rm -rf $(dirname $tmpdir)
                mkdir -p $tmpdir
                cd $tmpdir
                cp ~/buildfarm/.repo-zygote/.repo . -avl
                (
                    cd .repo/manifests
                    git reset --hard
                    git clean -xfd
                )
            fi

            cd $tmpdir
            repo init -u ssh://gerrit.it.chehejia.com/qualcomm/platform/manifest.git -b sanfrancisco -m $xml --repo-url chehejia:/googlesource/git-repo --reference=/data/mirror/ -g all
            repo sync -j4 -d -c -f || true
            cd ~/buildfarm/
            mv $tmpdir "$dir"
            touch "$dir"
            cd "$dir"
            . ~/system-config/.bashrc
            if test ! -d ~/.cache/system-config/for-code-reading/$PWD; then
                for-code-reading
            fi
        )
    fi
}


clear_all_old_patches() {
    echo clear_all_old_patches
    local repo_dir=$(lookup-file -e .repo)
    mkdir -p $repo_dir/patches
    for x in $(
                  cd $repo_dir/patches >/dev/null 2>&1;
                  for x in *; do
                      if test -f $x; then
                          echo *
                      fi
                  done
              ); do

        (
            cd $repo_dir/..
            project=${x//%/\/}
            echo clearing old patches in $project
            cd $project
            if test ! -d .git; then
                die "not a project: $project"
            fi

            git reset --hard $(repo-remote-branch)
            git clean -xfd
        )
    done
    rm $repo_dir/patches -rf
}

mark_a_patch() {
    local repo_dir=$(lookup-file -e .repo)
    mkdir -p $repo_dir/patches
    local project=$1
    (
        cd $repo_dir/patches
        touch ${project//\//%}
    )
}


get-base-build-from-branch() {
    local branch=$1
    if test -e ~/buildfarm/."$branch"; then
        readlink -f ~/buildfarm/."$branch"
    elif test -d ~/buildfarm/"$branch"; then
        echo ~/buildfarm/"$branch"
    else
        die "Can't decide the base build for branch: '$branch'"
    fi
}


psync() {
    if test "$testabc" = true; then
        echo testing abc 1>&2
    else
        return 0
    fi
    command psync "$@" </dev/null
}
ssh() {

    (
        if test $dryrun = true; then
            if test "$1" = code3; then
                shift
                set -- abc@172.16.2.25 "$@" # only show
            fi
            echo ssh "$@" | tee /dev/stderr | putclip
        fi
    )

    if test $dryrun = true; then
        exit
    fi
    if test $USER = bhj -a -e ~/.ssh/id_rsa_nopass; then
        unset SSH_AGENT_PID SSH_AUTH_SOCK
        command ssh -i ~/.ssh/id_rsa_nopass "$@"
    else
        command ssh "$@"
    fi
}

function remote-mm() { # submit a remote build request, preferably using 'mm'
    if echo $SHELLOPTS | grep -q xtrace; then
        export SHELLOPTS
    fi

    if test $(pwd) = ~/src/linux; then
        echo doing my linux hack
        command psync -S -t ~/src/android/kernel/ localhost .
        cd ~/src/android/kernel/
        remote-mm "$@"
        exit
    fi

    declare -a repo_dirs

    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l xdebug d:dir m:make=mm a:add
    ## end code-generator
    ## start generated code
    local debug=false
    local dir=
    local make=mm
    local add=
    local OPTIND=1
    while getopts 'xd:m:a:' opt; do
        case "$opt" in
            x)    debug=true;;
            d)    dir=$OPTARG;;
            m)    make=$OPTARG;;
            a)    add=$OPTARG;;
            *)    echo Usage Error;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    if test ${#repo_dirs[@]} = 0; then
        repo_dirs=($PWD)
    fi

    get-all-urls() {
        local x
        gerrit-push-review() {
            command gerrit-push-review "$@" </dev/null
        }

        for x in "${repo_dirs[@]}"; do
            (
                cd "$x"
                (
                    if git st -s | grep .; then
                        if gerrit query --current-patch-set $(gerrit-review-url |perl -npe 's!.*/!!') 2>/dev/null|grep 'status: DRAFT'; then
                            git commit --no-edit --amend -a >/dev/null 2>&1
                        else
                            git add .
                            git commit -m 'abc test build' -a
                        fi
                        gerrit-push-review -n -R -d
                    fi
                    if [[ "$(gerrit-review-url)" =~ //[^/]*$  ]]; then
                        gerrit-push-review -n -R -d
                    fi
                ) >/dev/null 2>&1
            )
            gerrit-review-url
        done
    }

    if test "$USER" = bhj; then
        psync
    fi

    local xdebug=
    if test $debug = true || echo $SHELLOPTS | grep -q xtrace; then
        xdebug=-x
    fi
    ssh -o RequestTTY=yes $ABC_REMOTE_HOST abc $xdebug build-request $(get-all-urls) -m $make $add
}


lock-base-build() {
    exec 9> $base_build/.abc.lock
    echo "Will now try to lock: " "$@"
    flock 9
    echo "Locked."
}

lock-file() {
    exec 9> $1
    shift
    echo "Will now try to lock: " "$@"
    flock 9
    echo "Locked."
}

copy-output-files() {
    echo "$@"
    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l t:target
    ## end code-generator
    ## start generated code
    local target=
    local OPTIND=1
    while getopts 't:' opt; do
        case "$opt" in
            t)    target=$OPTARG;;
            *)    echo Usage Error;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code
    target=~/buildfarm/.abc-output/$(basename $base_build)/$target

    mkdir -p $target
    for x in "$@"; do
        if test ! -e "$x"; then
            info "$x" not exist
            continue
        fi
        rsync "$x" $target/ -av --delete
    done

    (

        if test -z "$ABC_USER"; then
            info "no ABC_USER is set, should exit"
            exit
        fi
        cd $target/
        export ABC_USER_OUTPUT=../by-user/$ABC_USER/$(basename $target)
        find . -type d | perl -ne 'use File::Path qw(make_path); chomp; make_path("$ENV{ABC_USER_OUTPUT}/$_")'
        find . -type f | perl -ne 'chomp; link $_, "$ENV{ABC_USER_OUTPUT}/$_"'

        files=$(
            rsync . $ABC_USER_OUTPUT -av --delete 2>&1 |
                tee /dev/stderr |
                while read file; do
                    if test -e "$file"; then
                        echo $file
                    fi
                done
             )

        smb_folder=$(readlink -f $ABC_USER_OUTPUT | perl -npe 's,^/Share,smb://172.16.2.25,')
        if test "$LOCALIP" && test "$LOCALIP" != 172.16.2.25; then
            smb_folder=$(echo $smb_folder|perl -npe 's,smb://172.16.2.25/abc/,smb://172.16.2.25/abc/$ENV{LOCALIP}/,')
        fi
        echo "Please get your files at: $smb_folder"
        if [[ "$ABC_USER" =~ baohaojun@.* ]]; then
            cat <<EOF
cat <<XXX | while read x; do (set -x; adb-push $smb_folder/\$x); done
$files
XXX
EOF
        fi
    )

}

function repo-cherry-find-all() { # find all patches that needs
                                  # cherry-picking between 2 branches.

    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l b:base f:from t:to ssync F:from_xml
    ## end code-generator
    ## start generated code
    local base=
    local from=
    local to=
    local sync=false
    local from_xml=
    local OPTIND=1
    while getopts 'b:f:t:sF:' opt; do
        case "$opt" in
            b)    base=$OPTARG;;
            f)    from=$OPTARG;;
            t)    to=$OPTARG;;
            s)    sync=true;;
            F)    from_xml=$OPTARG;;
            *)    echo Usage Error; exit 2;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    if test ! -d ~/buildfarm/"$base"/bionic/.git; then
        die "Invalid base build: $base"
    fi

    if test "$from_xml" -a "$from" -o "$to"; then
        die "should not specify $from_xml and $from/$to together"
    fi

    local base_build=~/buildfarm/"$base"
    (
        cd ~/buildfarm/"$base"
        lock-base-build "sync the repos"

        if test "$sync" = true; then
            my-rfa 'pwd; git fetch -n $(repo-remote)'
        fi
    )

    (
        cd ~/buildfarm/"$base"
        mkdir -p out/diff
        lock-file out/diff/repo-cherry-find-all.lock "will now lock for repo-cherry-find-all"
        if test "$from_xml"; then
            from_xml=$(basename $from_xml)
            command repo-cherry-find-all --xf $from_xml
        else
            command repo-cherry-find-all -f $from -t $to
        fi
        base_build=~/buildfarm/"$base"
        copy-output-files -t repo-cherry-find-all out/diff
    )
}


function test-cat() {
    cat
}

mm() {
    echo doing mm in $PWD

    local extra=
    if test "$xdebug"; then
        extra=-v
    fi
    command mm $extra -j8 "$@"
}
android-make() {
    echo doing android-make in $PWD: $@
    local extra=
    if test "$xdebug"; then
        extra=-v
    fi
    command android-make $extra -j8 "$@"
}

copy-compile-output-files() {
    copy-output-files -t "$(basename $(readlink -f out))" \
                      out/target/product/*/system* \
                      out/target/product/*/boot* \
                      out/target/product/*/root \
                      out/target/product/*/obj/KERNEL_OBJ/vmlinux \
                      out/target/product/*/emmc_appsboot.mbn \
                      $extra |
        grep -v '/$'

}

function build-request() { # submit a build request
    echo "你好，安卓编译中心（Android Build Center，abc）已停止提供编译服务，目前只提供代码搜索服务（参考 workflow 文档中对 abc-x grep 命令的说明）"
    exit 0
    ## start generated code
    TEMP=$(getopt -o b:m:hd:p: --long "base,method:,help,dir:,patch-dir:"  -n $(basename $0) -- "$@")
    method=mm
    mm_dir=
    local base_build
    local base
    local patch_dir
    eval set -- "$TEMP"
    while true; do
        case "$1" in
            -m|--method)
                method=${2,,}
                shift 2
                ;;
            -b|--base)
                base=$2
                shift 2
                ;;
            -p|--patch-dir)
                patch_dir=$2
                shift 2
                ;;
            -h|--help)
                cat <<EOF
Usage: build-request -b|--base BASE-BUILD-NAME \
       -m|--method [mm|dep|full] \
       [-d|--dir MM_DIR] \
       [-c|--copy FILE|DIR]... \
       [-t|--to COPY_TARGET] \
       [REVIEWS]... \
       [-p|--patch PATCH_DIR]

You can use this command to submit a build request using a gerrit
review, specify what to build, and what to copy back into your PC
using share folder.

-b|--base BASE-BUILD-NAME

    BASE-BUILD-NAME means the base build to use for building your
    patch. You can use lbb to list the base builds available.

    If not specified, you must specify one or more reviews, and the
    base build will be calculated from the reviews.

-m|--method [mm|dep|full|fullbase|kernel|lk|bootimage]
    MM means use android mm build
    DEP means build the whole dir, including DEPendencies
    FULL means to do a full build (need 10~15 minutes)
    FULLBASE means repo sync the base and do a full build
    KERNEL means to rebuild kernel and re-generate boot.img
    MODULES means to do the KERNEL and the wlan.ko
    BOOTIMAGE means to build the boot.img (kernel, ramdisk, etc)
    LK means to build the little kernel boot loader

    Default is mm.

[-d|--dir MM_DIR] Specify where to do the build, if you are using mm
    or partial build with dependencies resolved.

    Default is the git project if there is an Android.mk in it's top
    folder.

REVIEWS are gerrit review urls or ids, such as
http://172.16.0.9:8080/47807/ or 47807. All reviews must be for the
same base build (with the same gerrit branch). If you are using patch
files for build request, then no reviews are required.

EOF
                exit
                ;;
            -d|--dir)
                mm_dir=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                die "internal error: $(. bt; echo; bt | indent-stdin)"
                ;;
        esac
    done
    ## end generated code

    num_reviews=$#

    target_branch=

    declare -A review_patchset_map
    local old_review_id

    if test "$patch_dir" -a $# != 0; then
        die "Can't build with both patches and reviews"
    fi

    if test "$patch_dir" -a "$base" -a "$base" != ..; then
        base_build=$(readlink -f ~/buildfarm/"$base")
        if test ! -d "$base_build"; then
            die "Invalid base build: $base_build"
        fi

        if ! is-a-subdir "$base_build" ~/buildfarm/; then
            die "Invalid base build: $base_build"
        fi
        cd $base_build
        tee /tmp/abc-patch.$$ | perl -ne 'print unless m/^GIT binary patch/ .. m/^$/'
        lock-base-build "for build request"

        clear_all_old_patches

        (
            cd $patch_dir

            if ! is-a-subdir "$(lookup-file -e .git/..)" $base_build; then
                die "Invalid patch dir: $patch_dir"
            fi
            mark_a_patch $(ap $(lookup-file -e .git/..))

            (
                patch_dir=$(ap)
                cd $(lookup-file .repo)
                git init abc-patches || true
                cd abc-patches
                mkdir -p $ABC_USER/$patch_dir
                cp /tmp/abc-patch.$$ $ABC_USER/$patch_dir/patch
                git add .
                git commit -m 'submit patch for build' --allow-empty
            )

            if test "$(stat -c %s /tmp/abc-patch.$$)" = 0; then
                echo should touch everything for rebuild
                rm /tmp/abc-patch.$$
                find . -type f -print0 |xargs -0 touch
            else
                echo will now apply a patch.
                if echo $SHELLOPTS | grep -q xtrace; then
                    echo debugging, should touch everything for rebuild
                    find . -type f -print0 |xargs -0 touch
                fi
                (
                    cat /tmp/abc-patch.$$; rm -f /tmp/abc-patch.$$
                ) | git apply
            fi
        )

    fi


    for review_id in "$@"; do
        old_review_id=$review_id
        if [[ "$review_id" =~ http:// ]]; then
            review_id=$(basename "$review_id")
        fi

        if ! echo "$review_id" | grep -q -P '^\d+$'; then
            die "review_id $review_id is not a number."
        fi

        review_info=$(ssh smartisan gerrit query --current-patch-set $review_id)
        branch=$(echo "$review_info" | grep "^\s+branch:" -P | pn 2)
        project=$(echo "$review_info" | grep "^\s+project:" -P | pn 2)
        patchset=$(echo "$review_info" | grep "^\s+ref:" -P | pn 2 | xargs basename)

        review_patchset_map[$old_review_id]=$review_id,$patchset

        if test ! "$target_branch"; then
            target_branch=$branch
            if test ! "$branch"; then
                die "Can't determine branch from then review"
            fi

            base_build=$(get-base-build-from-branch $target_branch)
            lock-base-build decided our base_build to be $base_build, will lock now


            (
                cd $base_build
                clear_all_old_patches
                if test "$method" = fullbase; then
                    repo sync -j4 -d --no-tags
                fi
            )



        elif test "$target_branch" != "$branch"; then
            die "Your reviews have more than 1 branches: $target_branch and $branch"
        fi



        cd "$base_build"
        path=$(my-rfa 'if test "$(git-remote-url|perl -npe s,.*//.*?/,,)" = '$project'; then pwd; fi')
        if test ! -d "$path"; then
            die "Can't decide the path for review id: $review_id"
        fi

        (
            cd "$path"
            rev=$(echo "$review_info" | grep "^\s+ref:" -P | pn 2)
            git reset --hard
            git fetch $(repo-remote) $rev
            git merge --no-edit FETCH_HEAD || die "Can't merge the fetch head"
            mark_a_patch $(ap)
        )
    done

    if test "$method" = mm; then
        if test $num_reviews != 1 && test ! -d "$mm_dir"; then
            if test "$num_reviews" = 0 && test "$patch_dir"; then
                true
            else
                die "mm can be used only if there is one review patch"
            fi
        fi

        if test -d "$mm_dir"; then
            (
                if ! is-a-subdir "$(readlink -f "$mm_dir")" "$base_build"; then
                    die "$mm_dir is not in Android dir"
                fi
                cd "$mm_dir"
                mm
            )
        elif test -e "$path"/Android.mk; then
            (
                cd $path
                mm;
            )
        else
            die "Can't find Android.mk in $path for mm build"
        fi
    elif test "$method" = dep; then
        if test -d "$mm_dir"; then
            (
                if ! is-a-subdir "$(readlink -f "$mm_dir")" "$base_build"; then
                    die "$mm_dir is not in Android dir"
                fi
                cd "$mm_dir"
                android-make -d .
            )
        else
            (
                cd $path
                android-make -d .
            )
        fi
    elif test "$method" = full -o "$method" = fullbase; then
        android-make
    elif test "$method" = lk; then
        android-make lk
    elif test "$method" = kernel -o "$method" = modules; then
        (
            cd kernel
            if git diff $(repo-remote-branch) --name-status | grep \\.dtsi; then
                echo should touch dts files
                cd arch/arm/boot/dts
                touch *
            fi
        )
        android-make msm-kernel &&
            if test "$method" = modules; then
                (cd vendor/qcom/opensource/wlan/prima && mm)
            fi
    elif test "$method" = bootimage; then
        android-make bootimage
    else
        die "Can't build with method '$method'"
    fi || {
        for review_id in "$@"; do
            (
                gerrit-build-review "$review_id" -1
            )
        done
        exit
    }

    for review_id in "$@"; do
        (
            set -x
            gerrit-build-review "$review_id" +1
        )
    done

    local extra=
    if test -e .repo/manifest.xml.base; then
        extra=.repo/manifest.xml.base
    fi

    copy-compile-output-files
}

function list-base-builds() { # list base builds
    if test ! "$SSH_CLIENT"; then
        ssh $ABC_REMOTE_HOST abc list-base-builds
        exit
    fi
    cd ~/buildfarm/
    for x in *; do
        if test -d "$x"; then
            echo "$x"
        fi
    done
}

function lbb() { # alias for lbb
    list-base-builds
}

function cat-base-build-manifest.xml() {
    get-base-build "$@"
    cd $base_build/.repo
    cat manifest.xml
}

function repo-revision() {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l b:base_build p:repo_path
    ## end code-generator
    ## start generated code
    local base_build=
    local repo_path=
    local OPTIND=1
    while getopts 'b:p:' opt; do
        case "$opt" in
            b)    base_build=$OPTARG;;
            p)    repo_path=$OPTARG;;
            *)    echo Usage Error;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    base_build=$(readlink -f ~/buildfarm/"$base_build")
    if test -d "$base_build" && is-a-subdir "$base_build" ~/buildfarm/; then
        cd "$base_build"
        if test -d "$repo_path" && is-a-subdir "$base_build"/"$repo_path" "$base_build"; then
            cd "$base_build"/"$repo_path"
            repo forall . -c 'echo $REPO_LREV'
        else
            die "Invalid repo dir: $repo_path"
        fi
    else
        die "Invalid base build: $base_build"
    fi
}

abc-notify-maintainer() {
    info Will now send email to maintainer: "$@"
    /usr/bin/mailx -S from=smartisancm@smartisan.com  -S smtp=localhost:25 "$@" baohaojun@smartisan.com < /dev/null
    return 1
}


function add-base-build() {
    base_build=$1
    if test ! -d ~/buildfarm/"$base_build"; then
        cd ~/tmp
        nohup setsid abc update_one_xml "${base_build//%/\/}.xml" "${base_build}" </dev/null >>nohup.out 2>&1 &
    fi
}

function detect-base-build-names() {
    cd ~/buildfarm/
    for x in */; do
        if test -d $x/.repo; then
            y=$(basename $(readlink -f $x/.repo/manifest.xml))
            y=${y%.xml}
            if test ${x%/} != "$y"; then
                echo $x should be $y
            fi
        else
            echo $x not a base build
        fi
    done
}

function sync-qc-oems() {
    if test $# != 1; then
        die "Error: Usage $(basename $0) qc-oem-repo-name, for e.g., $(basename $0) msm8992-la-1-0_amss_device"
    fi

    if test ! -e ~/src/product-config/sync-qc-oems/"$1"; then
        if test ! -d ~/src/product-config/.git; then
            git clone s:product-config ~/src/product-config
        fi
        (
            cd ~/src/product-config/
            git pull
        )
    fi

    if [[ "$1" =~ / ]]; then
        die invalid oem project: $1
    fi

    if test -f ~/src/product-config/sync-qc-oems/"$1"; then
        ~/tmp/sync-qc-oems "$1"
        (
            cd /mnt/ota-base/.code/qualcomm/"$1".git
            for x in $(git branch -a | grep '^\s*qualcomm/' -P); do
                echo git log for branch "$x":
                git log $x
            done
        )
    else
        die "oem project $1 not exist? add it in smartisan:product-config (in subdir sync-qc-oems)"
    fi
}

function sync-simt-repos() {
    if test $# != 2; then
        die "Error: Usage $(basename $0) u1/u2 branch_name"
    fi
    HOME=/home/bhj
    USER=bhj

    exec 9< ~/tmp/sync-simt-repos
    if ! flock -n 9; then
        die "Can't lock the sync script, others might be syncing?"
    fi
    ~/tmp/sync-simt-repos "$@"
}

function mirror-manifests() {
    set -e

    if ! (
            mkdir -p ~/src/mirror-manifests
            cd ~/src/mirror-manifests
            if test ! -d manifests/.git; then
                git clone smartisan:/qualcomm/platform/manifest.git manifests.$$ -b sanfrancisco
                mv manifests.$$ manifests
                cd manifests
                gerrit-fix-hooks
            else
                cd manifests
                git pull -f
            fi

            for x in *.xml; do
                perl -npe 's,ssh://172.16.0.9:29418,smartisan-gerrit:,' $x > git-code/$x;
                if grep smartisan-gerrit $x; then
                    perl -npe 's,smartisan-gerrit:,smartisan:,' -i $x
                fi
            done
            git add .
            git commit -m 'Updated manifests for jenkins'
            git push $(repo-remote)
        ); then
        abc-notify-maintainer -s "mirror manifests failed"
    fi
}

function cron-daily-build() { # do a daily build using cron. do not submit this task!
    . ~/system-config/bin/set-ssh-agent
    set -x
    export RUNNING_IN_CRON=true

    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l b:base_builds
    ## end code-generator
    ## start generated code
    local -a base_builds=()
    local OPTIND=1
    while getopts 'b:' opt; do
        case "$opt" in
            b)    base_builds=("${base_builds[@]}" "$OPTARG");;
            *)    echo Usage Error;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    if test ${#base_builds[@]} = 0; then
        base_builds=(
            $(
                cd ~/buildfarm/
                for x in *; do
                    echo $x
                done | sort
            )
        )
    fi


    for b in "${base_builds[@]}"; do
        d=~/buildfarm/$b
        local base_build=$d
        if test ! -d "$d"; then
            continue;
        fi

        if test -L "$d"; then
            continue;
        fi

        if test ! -e "$d/.repo/do-beagrep"; then
            mkdir -p ~/buildfarm/.cold
            rm -rf ~/buildfarm/.cold/"$b"
            mv "$d" ~/buildfarm/.cold
            continue
        fi
        (
            cd "$d"/.repo/manifests
            git reset --hard
            git clean -xfd
        ) || continue
        (
            cd "$d"
            lock-base-build "Will do cron daily build now"
            if test -e ".repo/do-not-build"; then
                info admin has set this as non-build, quit
                exit 0
            fi

            if ! is-tty-io; then
                (
                    cd .repo/manifests
                    git reset --hard
                    git clean -xfd
                )
                my-rfa "git reset --hard; git clean -xfd" || true
                (set -o pipefail; repo sync -c -j4 -d --no-tags 2>&1 | tee .repo/sync.log ||
                     abc-notify-maintainer -s "repo sync failed for $PWD: $?" || true
                )

                repo manifest -r -o .repo/manifest.xml.sync
                if test -e .repo/manifest.xml.base && diff .repo/manifest.xml.base .repo/manifest.xml.sync > .repo/manifest.xml.diff; then
                    info "The repo of $PWD don't need update"
                    exit 0
                else
                    info Will need to update the build in $PWD:
                fi
            fi

            (
                if ! is-tty-io; then
                    mkbeagrepidx&
                    SOURCECODETAGSMODE=true mkbeagrepidx
                    wait
                fi
            ) 9>/dev/null >/dev/null 2>&1 || true
            mv .repo/manifest.xml.sync .repo/manifest.xml.base
        ) || continue
    done
}

gerrit-build-review() {
    review_id=$1
    review_patch=${review_patchset_map[$review_id]}


    verified=${2:-1}
    if test "$verified" = +1; then
        message=$(
            cat <<EOF
This is an automated message from the Android Build Cake.

Everything merges and builds. Congratulations!
EOF
               )
    else
        message=$(
            cat <<EOF
Build failed.

This is an automated message from the Android Build Cake.

Please check the build log with this abc command:

    $(
        for x in "${abc_command[@]}"; do
            printf "%q " "$x"
        done
    )
EOF
               )
    fi
    set -x
    ssh -i ~/.ssh/id_rsa_cmtest cmtest@code -p 29418 gerrit review "$review_patch" --verified $verified -m \'"${message//\'/\'\\\'\'}"\'
}


function abc-tags() { # use beagrep to find matching files, for e.g.,
    # abc-tags "readlink" will list all files that
    # defines readlink.

    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l b:base
    ## end code-generator
    ## start generated code
    local base=
    local OPTIND=1
    while getopts 'b:' opt; do
        case "$opt" in
            b)    base=$OPTARG;;
            *)    echo Usage Error; exit 2;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    if test ! "$base"; then
        base=sfo-rom
    fi

    if test ! -d ~/buildfarm/"$base"; then
        info "这个版本还没有被创建源码索引，现在会尝试自动创建（完成后对给你发一封邮件）"
        add-base-build "$base"
        die "no such base build: $base"
    fi

    cd -P ~/buildfarm/"$base"

    grep-beatags -e "$@"
}


function abc-files() { # use beagrep to find matching files, for e.g.,
    # abc-files "readlink" will list all files that
    # contains readlink.

    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l b:base
    ## end code-generator
    ## start generated code
    local base=
    local OPTIND=1
    while getopts 'b:' opt; do
        case "$opt" in
            b)    base=$OPTARG;;
            *)    echo Usage Error; exit 2;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    if test ! "$base"; then
        base=sfo-rom
    fi

    if test ! -d ~/buildfarm/"$base"; then
        info "这个版本还没有被创建源码索引，现在会尝试自动创建（完成后对给你发一封邮件）"
        add-base-build "$base"
        die "no such base build: $base"
    fi

    cd -P ~/buildfarm/"$base"
    touch .repo/do-beagrep || true
    beagrep-files "$@" | cut -b $((${#PWD} + 2))-
}

function abc-beagrep() {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l b:base_build
    ## end code-generator
    ## start generated code
    local base_build=
    local OPTIND=1
    while getopts 'b:' opt; do
        case "$opt" in
            b)    base_build=$OPTARG;;
            *)    echo Usage Error; exit 2;;
        esac
    done
    shift $(($OPTIND - 1))
    
    ## end generated code
    
    base_build=$(readlink -f ~/buildfarm/"$base_build")
    if test ! -d "$base_build" || ! is-a-subdir "$base_build" ~/buildfarm/; then
        die "Invalid repo dir: $repo_path"
    fi
    cd "$base_build"
    args=$(cat)
    touch .repo/do-beagrep || true
    time (beagrep -s -e "$args" 2>&1) 2>~/.cache/system-config/logs/abc.time.$$ || true
    (
        flock 9
        echo $(now): $ABC_USER: $SSH_ORIGINAL_COMMAND $args $(grep real ~/.cache/system-config/logs/abc.time.$$) >> ~/.cache/system-config/logs/abc.log
        rm ~/.cache/system-config/logs/abc.time.$$
    ) 9> ~/.cache/system-config/logs/.abc.lock
}

function abc-grep-beatags() {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l b:base_build
    ## end code-generator
    ## start generated code
    local base_build=
    local OPTIND=1
    while getopts 'b:' opt; do
        case "$opt" in
            b)    base_build=$OPTARG;;
            *)    echo Usage Error; exit 2;;
        esac
    done
    shift $(($OPTIND - 1))
    
    ## end generated code
    
    base_build=$(readlink -f ~/buildfarm/"$base_build")
    if test ! -d "$base_build" || ! is-a-subdir "$base_build" ~/buildfarm/; then
        die "Invalid repo dir: $repo_path"
    fi
    cd "$base_build"
    args=$(cat)
    time (grep-beatags -e "$args" 2>&1) 2>~/.cache/system-config/logs/abc.time.$$ || true
    (
        flock 9
        echo $(now): $ABC_USER::: $SSH_ORIGINAL_COMMAND $args $(grep real ~/.cache/system-config/logs/abc.time.$$) >> ~/.cache/system-config/logs/abc.log
        rm ~/.cache/system-config/logs/abc.time.$$
    ) 9> ~/.cache/system-config/logs/.abc.lock
}


function create-slave() { # create a slave on another build, requires
                          # admin privilege



    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l s:slave
    ## end code-generator
    ## start generated code
    local slave=
    local OPTIND=1
    while getopts 's:' opt; do
        case "$opt" in
            s)    slave=$OPTARG;;
            *)    echo Usage Error;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    if test "$slave" = ""; then
        die "slave not specified"
    fi

    cd ~
    # . ~/system-config/bin/set-ssh-agent
    unset SSH_AUTH_SOCK
    command psync $slave system-config
    command rsync ~/external/local $slave:external -av --exclude .git
    # rsync .ssh $slave: -av --exclude .ssh/known_hosts --exclude=.ssh/.git --delete
    echo slave created.
}


function rm-non-build-files-kernel() {

    if ! echo "$ABC_USER" | grep -q baohaojun; then
        die "This function can only be run by admin,
you can find a branch with git branch -a | grep non-build"
    fi

    get-base-build "$@"
    cd $base_build/
    lock-base-build "rm-non-build-files-kernel"
    cd kernel
    clear_all_old_patches
    mark_a_patch $(ap)
    . ~/.config/system-config/.bashrc-path
    bash -x rm-non-build-files-kernel
    git add .
    git commit -s -m 'with non build files removed'
    git push $(repo-remote) HEAD:refs/heads/sandbox/$(my-rfa '$(lookup-file .repo/repo_info.pl) upstream')-bhj-rm-non-build -f
}

function help() {

    perl -ne 'print if m/^\s*function.*# / ... (m/^\s*$/ or not m/^\s*#/)' $0 |
        perl -ne 'if (m/^\s*function|^\s*#/) {print} else {print "\n"}' |
        grep -v '## start generated code'

    echo; echo

    if yes-or-no-p -y "Show the help manual page?"; then
        xdg-open http://172.16.0.251/baohaojun/blog/2015/03/06/0-abc-usage-manual.html
    fi
}

function remote-abc() { # run a remote abc command, such as abc-files
    if test "$USER" = bhj -a -e '/home/bhj/src/github/projects/ABC.org'; then
        (
            cd
            psync </dev/null
        )
    fi
    ssh $ABC_REMOTE_HOST abc "${@//[^-.a-z0-9:\/_ ]/ }"
}

if test "$(readlink -f "$BASH_SOURCE")" = "$(readlink -f "$(echo "$0" | grep / || which "$0" 2>/dev/null)" )"; then

    ## start code-generator "^\\s *#\\s *"
    # generate-getopts xdebug ttestabc ddryrun XDEBUG h:abc_host
    ## end code-generator
    ## start generated code
    debug=false
    testabc=false
    dryrun=false
    DEBUG=false
    abc_host=
    OPTIND=1
    while getopts 'xtdXh:' opt; do
        case "$opt" in
            x)    debug=true;;
            t)    testabc=true;;
            d)    dryrun=true;;
            X)    DEBUG=true;;
            h)    abc_host=$OPTARG;;
            *)    echo Usage Error; exit 2;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    if test "$debug" = true; then
        export xdebug=true
        set -x
    elif test "$DEBUG" = true; then
        export xdebug=true
        set -x
        if echo $SHELLOPTS | grep -q xtrace; then
            export SHELLOPTS
        fi
    else
        unset xdebug
    fi

    if test $testabc = true; then
        export ABC_REMOTE_HOST=code3
    fi

    if test "$abc_host"; then
        ABC_REMOTE_HOST=$abc_host
    fi

    if grep -q -P "^\s*function $1\s*\(" "$0" || test "$(basename $0)" = $1; then
        command=$1
        shift
        abc_command=("$command" "$@")
        "$command" "$@"
     else
         die "$1: is not an abc command"
    fi
fi


exit 0

# Local Variables: #
# eval: (read-only-mode 1) #
# End: #
# the-ultimate-script ends here
