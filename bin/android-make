#!/bin/bash

set -e

if test "$ANDROID_MAKE_JOBS"; then
    jobs=$ANDROID_MAKE_JOBS
else
    jobs=$(cat /proc/cpuinfo |grep '^processor'|wc -l) #default
    jobs=$((jobs * 3 / 2))
fi

eval "$(cat ~/system-config/bin/mm|perl -ne 'print if m/^quick-help/..m/\}/')"

am-help() {
    cat <<EOF
android-make 是对安卓编译“三步曲”（setenv、lunch、make）的一个封装，我个人发现三步曲特别容易出错：
  1. 容易忘记当前终端下配没配
  2. 多产品同时开发时，甚至可能会配了 A 产品，然后在同一个终端下去编译 B 产品

所以写了这个脚本。

此脚本还支持一些简单的子模块编译封装，比如 android-make kernel 就能
（快速）重编 bootimage 等，详情请用 android-make help-sub 命令查看。

EOF
}

## start code-generator "^\\s *#\\s *"
# generate-getopt -P vverbose='("" showcommands)' '?"编译的时候打印所有使用的命令"' \
    # c:config '?"使用哪个安卓编译配置？比如 aosp_arm-userdebug（参考安卓 lunch 用法）"' \
    # kkeep="('' -k)" '?"keep building：出错之后继续编译，把能编的全编完，方便解决编译错误"' \
    # d:make-dir '?"编译一个单独的目录（参考安卓 mmma 的用法"' \
    # j:jobs='$jobs' '?"指定使用多少个进程来执行并行编译"' \
    # qquick '?"$(quick-help)"'
## end code-generator
## start generated code
    TEMP=$(POSIXLY_CORRECT=true getopt -o c:j:kd:qvh \
                          --long config:,jobs:,keep,make-dir:,quick,verbose,help,no-keep,no-quick,no-verbose \
                          -n $(basename -- $0) -- "$@")
    declare config=
    declare jobs=$jobs
    declare keep=
    declare make_dir=
    declare quick=false
    declare verbose=
    eval set -- "$TEMP"
    while true; do
        case "$1" in

            -c|--config)
                config=$2
                shift 2

                ;;
            -j|--jobs)
                jobs=$2
                shift 2

                ;;
            -k|--keep|--no-keep)
                if test "$1" = --no-keep; then
                    keep=
                else
                    keep=-k
                fi
                shift

                ;;
            -d|--make-dir)
                make_dir=$2
                shift 2

                ;;
            -q|--quick|--no-quick)
                if test "$1" = --no-quick; then
                    quick=false
                else
                    quick=true
                fi
                shift

                ;;
            -v|--verbose|--no-verbose)
                if test "$1" = --no-verbose; then
                    verbose=
                else
                    verbose=showcommands
                fi
                shift

                ;;
            -h|--help)
                set +x
                echo -e
                echo
                echo Options and arguments:
                printf %06s '-c, '
                printf %-24s '--config=CONFIG'
                echo "使用哪个安卓编译配置？比如 aosp_arm-userdebug（参考安卓 lunch 用法）"
                printf %06s '-j, '
                printf %-24s '--jobs=JOBS'
                echo "指定使用多少个进程来执行并行编译"
                printf %06s '-k, '
                printf %-24s '--[no-]keep'
                echo "keep building：出错之后继续编译，把能编的全编完，方便解决编译错误"
                printf %06s '-d, '
                printf %-24s '--make-dir=MAKE_DIR'
                echo "编译一个单独的目录（参考安卓 mmma 的用法"
                printf %06s '-q, '
                printf %-24s '--[no-]quick'
                echo "$(quick-help)"
                printf %06s '-v, '
                printf %-24s '--[no-]verbose'
                echo "编译的时候打印所有使用的命令"
                exit
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                die "internal error: $(. bt; echo; bt | indent-stdin)"
                ;;
        esac
    done


## end generated code

if test "$1" = help-sub; then
    ~/system-config/etc/android-make/help-sub
    exit
fi

repo_dir=$(lookup-file .repo)
android_dir=$(lookup-file-dir -e bionic)
cd ${android_dir}
if test -d kernel && ! test -e ${repo_dir}/kernel; then
    # 以下是为了绕过某 CPU 厂商改出来的编译兼容性问题。本来安卓编译的
    # 一个设计目标是允许任意指定编译输出目录，而非硬编码为 out 的，但
    # 该厂商的工程师修改编译脚本时强行假设了输出目录就是 out。。。
    ln -sf $PWD/kernel ${repo_dir}
fi

export CCACHE_DIR=$repo_dir/.ccache
rm ~/.ccache >/dev/null 2>&1 || true
unset CLASSPATH

if ! test -d ${repo_dir} -a -e build/envsetup.sh; then
    die "Not an Android repo?"
fi

top_dir=$(pwd)

do-lunch() {
    if test -L out -a ! -e out; then
        rm out -rf # in case it is a dangling symlink.
    fi
    . ~/system-config/etc/.fix-java-version

    cd $top_dir || exit
    . build/envsetup.sh >/dev/null 2>&1

    if test -z "$config" -a ! -e buildspec.mk; then
        if test "$TARGET_PRODUCT" -a "$TARGET_BUILD_VARIANT"; then
            product=$TARGET_PRODUCT
            variant=$TARGET_BUILD_VARIANT
        else
            products=$(for x in "${LUNCH_MENU_CHOICES[@]}"; do echo ${x%-*}; done)
            product=$(select-args -p "请选择你要编译的产品" -o -- ${products[@]})
            variant=$(select-args -p "请选择你要编译的选项" -o -- userdebug user eng )
        fi
        config=$product-$variant
    elif test buildspec.mk; then
        saved_config=$(android-var-from-spec config)
        if test -z "${config}"; then
            config=${saved_config}
        fi

        if test "${config}" != "${saved_config}"; then
            hint -t 5 "之前设置的编译选项是 ${saved_config}，现在要改成 ${config}" || true
        fi
    fi

    variant=${config##*-}

    . android-set-product "${config}"

    export TARGET_PRODUCT=$TARGET_PRODUCT
    export TARGET_BUILD_VARIANT=$TARGET_BUILD_VARIANT

}

if test "${quick}" = true; then
    . .buildspec.sc || die "Can't import env from .buildspec"
else
    do-lunch
fi

if test "$DEBUG" = true; then
    set -x;
fi

test -e buildspec.mk || {
    echo no buildspec.mk, will exit now;
    echo please use android-make -c CONFIG, for e.g., aosp_x86-eng;
    exit;
}

exec 9> $OUT_DIR/.android-full-build.lock
(
    time (
        set -e
        if pwd | grep -P -e '\d+-\d+'; then
            echo looks like a rolling back build dir, do not do code reading in it
        else
            touch .for-code-reading
        fi
        echo 'about to lock at '$(date)
        if ! flock -n 9; then
            echo "你的当前安卓代码下已经有其他 android-make 进程在运行，不可以再次启动一个编译"
            echo "你可以用 fuser $OUT_DIR/.android-full-build.lock | xargs ps 命令查看相关进程情况"
            echo "也可以用 fuser -k $OUT_DIR/.android-full-build.lock 命令杀死相关进程"
            echo "接下来将等待 $OUT_DIR/.android-full-build.lock 文件锁被其他进程释放，你可以按下 Ctrl-C 以退出"
            flock 9
        fi
        echo 'lock success! at '$(date)

        result=''
        echo CLASSPATH is \'$CLASSPATH\'

        if test -e vendor/qcom/proprietary/mm-still/ipl/Android.mk; then
            perl -npe 's,^(\s+\Q$(CPU)\E)$,$1 \\,; s,^(\s+\Q-D__alignx\(x\)=__attribute__\(\(__aligned__\(x\)\)\)\E)$,$1 \\,' -i vendor/qcom/proprietary/mm-still/ipl/Android.mk
        fi

        # need do it again because android-set-product has changed PATH
        . ~/system-config/etc/.fix-java-version

        echo make starts here
        am_make_cmd=make
        if test "$quick" = true; then
            am_make_cmd=android-ninja
            verbose=${verbose:+-v}
        fi
        if test $# != 0; then
            if test $# = 1 -a -e ~/system-config/etc/android-make/"$1"; then
                . ~/system-config/etc/android-make/"$1"
            else
                $am_make_cmd -j$jobs $keep $* $verbose
            fi
        else
            echo PATH is $PATH
            if test "$make_dir"; then
                mmma "$(relative-path "$make_dir" .)" -j$jobs $verbose
            else
                $am_make_cmd -j$jobs $keep $verbose
            fi

        fi && result=$result'all ok; ' && echo build is successful || true
        echo
        echo "full build result is $result"
        echo
    )
) 2>&1 | tee $OUT_DIR_LONG/build.log
if test $# = 0; then
    cp $OUT_DIR_LONG/build.log $OUT_DIR_LONG/full-build.log
fi

relative-link $OUT_DIR_LONG out || true
if grep -Hn -e 'full build result is' $OUT_DIR_LONG/build.log | grep -e "all ok"; then
    exit 0
else
    cp $OUT_DIR_LONG/build.log $OUT_DIR_LONG/full-build.log.fail
    exit 1
fi
