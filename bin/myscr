#!/bin/bash

## start code-generator "^\\s *#\\s *"
# generate-getopt -P wwait-exit n:window-name \
    # s:session-name='${MYSCR_SESSION}' \
    # S:start-cmd ddebug ekeep-env \
    # @:socket='${MYSCR_SOCKET:-default}' \
    # @with-tty \
    # @bg='("" -d)' '?"把新的窗口放在“后台”"'
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o des:S:wn:h \
                      --long bg,debug,keep-env,session-name:,socket:,start-cmd:,wait-exit,window-name:,with-tty,help,no-bg,no-debug,no-keep-env,no-wait-exit,no-with-tty \
                      -n $(basename -- $0) -- "$@")
declare bg=
declare debug=false
declare keep_env=false
declare session_name=${MYSCR_SESSION}
declare socket=${MYSCR_SOCKET:-default}
declare start_cmd=
declare wait_exit=false
declare window_name=
declare with_tty=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        --bg|--no-bg)
            if test "$1" = --no-bg; then
                bg=
            else
                bg=-d
            fi
            shift

            ;;
        -d|--debug|--no-debug)
            if test "$1" = --no-debug; then
                debug=false
            else
                debug=true
            fi
            shift

            ;;
        -e|--keep-env|--no-keep-env)
            if test "$1" = --no-keep-env; then
                keep_env=false
            else
                keep_env=true
            fi
            shift

            ;;
        -s|--session-name)
            session_name=$2
            shift 2

            ;;
        --socket)
            socket=$2
            shift 2

            ;;
        -S|--start-cmd)
            start_cmd=$2
            shift 2

            ;;
        -w|--wait-exit|--no-wait-exit)
            if test "$1" = --no-wait-exit; then
                wait_exit=false
            else
                wait_exit=true
            fi
            shift

            ;;
        -n|--window-name)
            window_name=$2
            shift 2

            ;;
        --with-tty|--no-with-tty)
            if test "$1" = --no-with-tty; then
                with_tty=false
            else
                with_tty=true
            fi
            shift

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf "%06s" " "
            printf %-24s '--[no-]bg'
            echo "把新的窗口放在“后台”"
            printf %06s '-d, '
            printf %-24s '--[no-]debug'
            echo
            printf %06s '-e, '
            printf %-24s '--[no-]keep-env'
            echo
            printf %06s '-s, '
            printf %-24s '--session-name=SESSION_NAME'
            echo
            printf "%06s" " "
            printf %-24s '--socket=SOCKET'
            echo
            printf %06s '-S, '
            printf %-24s '--start-cmd=START_CMD'
            echo
            printf %06s '-w, '
            printf %-24s '--[no-]wait-exit'
            echo
            printf %06s '-n, '
            printf %-24s '--window-name=WINDOW_NAME'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]with-tty'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if echo $SHELLOPTS | grep -q xtrace; then
    debug=true
fi

if test "$window_name"; then
    export SCREEN_TITLE=$window_name
fi

oldpwd=$PWD
cd
if test "$keep_env" = false; then
    unset ANDROID_SERIAL
fi
export SCREEN_SESSION_PID=$$

echo shell is $SHELL > ~/.cache/system-config/logs/myscr.log
if test -z "$SHELL" -o "$SHELL" = /bin/sh && test -e /bin/bash; then
    export SHELL=/bin/bash
fi

if test "$USER" = bhj && test $# = 0 || test $# = 1 -a "$1" = first; then
    . ~/system-config/.bashrc-ssh-agent
fi

if test -x /opt/local/bin/bash; then
    export SHELL=/opt/local/bin/bash;
fi

if test "$keep_env" = false; then
    . ~/system-config/.profile
fi
#. /etc/bash_completion

if test -z "$session_name"; then
    session_name=first
    if test "$1" = first; then
        shift
    fi
fi

session-exists() {
    if test "$SC_USE_TMUX" = true; then
        tmux -L ${socket} list-sessions | grep "$session_name"
    else
        screen -list|grep "$session_name"
    fi
}

using-screen() {
    test "$SC_USE_TMUX" != true
}

using-tmux() {
    test "$SC_USE_TMUX" = true
}

find-or-exec() {
    if test -z "${bg}"; then
        command find-or-exec "$@"
    fi
}

if using-screen; then
    screen -wipe
else
    tmux_start_cmd=$(for x in $start_cmd "$@"; do
                         printf "%q " "$x"
                     done
                  )
    if test -z "$tmux_start_cmd"; then
        tmux_start_cmd=/bin/bash
    fi
fi

if session-exists; then
    if test "$#" = 1 && [[ $1 =~ " " ]]; then
        set -- bash -c "$1"
    fi

    if test $# != 0; then
        (
            if test "${keep_env}" = true; then
                declare -x -p | tee /tmp/screen-env.$$
                echo
            fi
            if echo $SHELLOPTS | grep -q xtrace; then
                echo 'set -x;'
            fi

            if test "$debug" = false; then
                if test "$wait_exit" = true; then
                    echo . atexit rm -f /tmp/screen-exec.$$ /tmp/screen-env.$$
                else
                    echo rm -f /tmp/screen-exec.$$ /tmp/screen-env.$$
                fi
            fi

            echo . ~/system-config/bin/set-ssh-agent
            printf "cd %q;" "$oldpwd"
            echo export SCREEN_TITLE=$SCREEN_TITLE
            for x in "$@"; do
                printf "%q " "$x"
            done
        ) > /tmp/screen-exec.$$

        find-or-exec konsole >/dev/null 2>&1 || true
        if test -z "$SCREEN_TITLE"; then
            SCREEN_TITLE=bash
        fi
        if using-screen; then
            screen -X -S $session_name screen -t "$SCREEN_TITLE" bash /tmp/screen-exec.$$ >/dev/null 2>&1&
        else
            if test "$with_tty" = true; then
                tmux -L ${socket} new-window $bg -n "$SCREEN_TITLE" "bash-tty '. /tmp/screen-env.$$; bash /tmp/screen-exec.$$'"
            else
                tmux -L ${socket} new-window $bg -n "$SCREEN_TITLE" "bash -l -i /tmp/screen-exec.$$"
            fi
            find-or-exec konsole
        fi
        if test "$wait_exit" = true; then
            while test -e /tmp/screen-exec.$$; do
                sleep 2
            done
        fi
        exit
    fi

    # $# = 0 ...
    if using-screen; then
        exec screen -x -r $session_name -t $session_name -s $SHELL $start_cmd "$@"
    else
        exec tmux -L ${socket} attach
    fi
else # session not exist
    if using-screen; then
        exec screen -S $session_name -t $session_name -s $SHELL $start_cmd "$@"
    else
        exec tmux -L ${socket} new-session -s $session_name -n $session_name "$tmux_start_cmd"
    fi
fi
