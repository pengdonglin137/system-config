#!/bin/bash

if echo $SHELLOPTS | grep -q xtrace; then
    export SHELLOPTS
fi
set -e

set -o pipefail

me=$(readlink -f $0)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $0)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi
b0=$(basename $0)

gpr-help() {
    cat <<EOF | grep -v '^#.*#$'
# start org #
使用方法：$b0 [OPTIONS]... REVIEWERS...

这是一个方便往 Gerrit 上 push review 的脚本。功能：
    - 默认自动计算该往哪条分支上提交；也可自己用 -b 参数指定
    - 允许全局 push（当前目录下有 .repo 目录） 或单个 git 仓库 push（当前目录下有 .git）
    - push 的同时允许指定 Reviewers（后面跟一个或多个同事的账号作为参数）

所有功能最后都是调用 git 命令实现，请阅读脚本源码并参考 git 官方文档，比如 git push --help（git push 最简单的调用方法是不带任何参数，git 会自动帮你计算往哪个 remote 服务器、哪条分支上 push 哪个 commit，这是最方便的用法，此脚本就是受此启发而写出来的对 gerrit push review 操作的封装）。
# end org #
EOF
}


## start code-generator "^\\s *#\\s *"
# generate-getopt -p gpr -e '?"$(gpr-help)"' \
    # r:push-rev=HEAD '?"要 push 哪个 revision，默认是 HEAD"' \
    # t:patch-topic '?"要全局多个 repo push 或一个 repo 下 push 多个 patch 的时候，加个 topic，方便 review"' \
    # Rskip-local-review '?"提交前不要做 local review（鼓励做 local review！）"' \
    # @draft=true '?"提一个 draft review，打个草稿，继续完善，暂时不开放给其他同事"' \
    # @skip-gerrit '?"不要提到 gerrit 上 review，直接往 refs/heads/ 上 push"' \
    # b:to-branch '?"提到哪个分支上，若不指定，默认是 git 当前在跟踪的分支或 repo manifest 中设置的分支"' \
    # @:repo-remote=${REPO_REMOTE} '?"提给哪个 repo remote，默认是 REPO_REMOTE 变量或 git remote 或 repo manifest 中设置的 remote（依此顺序）"' \
    # @do-rebase=true '?"要不要先 rebase 到远程服务器分支，默认是要 rebase"' \
    # @:review-push-url '?"使用自己制定的 push url，不要让脚本自动计算（适于用：自动计算结果有误；测试等）"'
## end code-generator
## start generated code
TEMP=$( getopt -o t:r:Rb:h \
               --long do-rebase,draft,patch-topic:,push-rev:,repo-remote:,review-push-url:,skip-gerrit,skip-local-review,to-branch:,help,no-do-rebase,no-draft,no-skip-gerrit,no-skip-local-review \
               -n $(basename -- $0) -- "$@")
declare -x gpr_do_rebase=${gpr_do_rebase:-true}
declare -x gpr_draft=${gpr_draft:-true}
declare -x gpr_patch_topic=${gpr_patch_topic:-}
declare -x gpr_push_rev=${gpr_push_rev:-HEAD}
declare -x gpr_repo_remote=${gpr_repo_remote:-}
declare -x gpr_review_push_url=${gpr_review_push_url:-}
declare -x gpr_skip_gerrit=${gpr_skip_gerrit:-false}
declare -x gpr_skip_local_review=${gpr_skip_local_review:-false}
declare -x gpr_to_branch=${gpr_to_branch:-}
eval set -- "$TEMP"
while true; do
    case "$1" in

        --do-rebase|--no-do-rebase)
            if test "$1" = --no-do-rebase; then
                gpr_do_rebase=false
            else
                gpr_do_rebase=true
            fi
            shift

            ;;
        --draft|--no-draft)
            if test "$1" = --no-draft; then
                gpr_draft=false
            else
                gpr_draft=true
            fi
            shift

            ;;
        -t|--patch-topic)
            gpr_patch_topic=$2
            shift 2

            ;;
        -r|--push-rev)
            gpr_push_rev=$2
            shift 2

            ;;
        --repo-remote)
            gpr_repo_remote=$2
            shift 2

            ;;
        --review-push-url)
            gpr_review_push_url=$2
            shift 2

            ;;
        --skip-gerrit|--no-skip-gerrit)
            if test "$1" = --no-skip-gerrit; then
                gpr_skip_gerrit=false
            else
                gpr_skip_gerrit=true
            fi
            shift

            ;;
        -R|--skip-local-review|--no-skip-local-review)
            if test "$1" = --no-skip-local-review; then
                gpr_skip_local_review=false
            else
                gpr_skip_local_review=true
            fi
            shift

            ;;
        -b|--to-branch)
            gpr_to_branch=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e "$(gpr-help)"
            echo
            echo Options and arguments:
            printf "%06s" " "
            printf %-24s '--[no-]do-rebase'
            echo "要不要先 rebase 到远程服务器分支，默认是要 rebase"
            printf "%06s" " "
            printf %-24s '--[no-]draft'
            echo "提一个 draft review，打个草稿，继续完善，暂时不开放给其他同事"
            printf %06s '-t, '
            printf %-24s '--patch-topic=PATCH_TOPIC'
            echo
            printf "%30s" ""
            echo "要全局多个 repo push 或一个 repo 下 push 多个 patch 的时候，加个 topic，方便 review"
            printf %06s '-r, '
            printf %-24s '--push-rev=PUSH_REV'
            echo "要 push 哪个 revision，默认是 HEAD"
            printf "%06s" " "
            printf %-24s '--repo-remote=REPO_REMOTE'
            echo
            printf "%30s" ""
            echo "提给哪个 repo remote，默认是 REPO_REMOTE 变量或 git remote 或 repo manifest 中设置的 remote（依此顺序）"
            printf "%06s" " "
            printf %-24s '--review-push-url=REVIEW_PUSH_URL'
            echo
            printf "%30s" ""
            echo "使用自己制定的 push url，不要让脚本自动计算（适于用：自动计算结果有误；测试等）"
            printf "%06s" " "
            printf %-24s '--[no-]skip-gerrit'
            echo "不要提到 gerrit 上 review，直接往 refs/heads/ 上 push"
            printf %06s '-R, '
            printf %-24s '--[no-]skip-local-review'
            echo "提交前不要做 local review（鼓励做 local review！）"
            printf %06s '-b, '
            printf %-24s '--to-branch=TO_BRANCH'
            echo "提到哪个分支上，若不指定，默认是 git 当前在跟踪的分支或 repo manifest 中设置的分支"
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test -d .repo; then
    hint "看起来你想要 push 所有有改动的 repo，这个需要你选择一下要 push 哪些 repo。"
    declare -A all_history_projects
    if ( test -e ~/.config/gerrit-push-review.projects && . ~/.config/gerrit-push-review.projects); then
        . ~/.config/gerrit-push-review.projects
    fi

    repo-is-dirty () {
        (
            cd "$1"
            repo-changes? | grep . -q
        )
    }

    all_changed_projects=(
            $(
                for p in "${!all_history_projects[@]}"; do
                    if test -d "$p/.git" && repo-is-dirty "$p"; then
                        echo "$p"
                    fi
                done
            )
        )

    if test "${#all_changed_projects[@]}" = 0; then
        hint "你以前全局 push 过的所有仓库下都没有改动，需要继续手动选择 push 哪些仓库"
        manual_select=true
    elif yes-or-no-p -y "这些是你以前全局 push 过、并且本次也有改动的仓库，确认这些就是全部要 push 的仓库么？"; then
         manual_select=false
    else
        hint "接下来需要继续选择要 push 哪些仓库"
        manual_select=true
    fi

    if test "$manual_select" = true; then
       while true; do
           if test "${#all_changed_projects[@]}" != 0; then
               confirm_line=$(
                   echo "当前已选择的有改动的仓库，确认没有遗漏： $(string-join ', ' ${all_changed_projects[@]})"
                           )
           else
               confirm_line=
           fi
           selected_project=$(
               select-args -p "请输入你的选择（第一个选项可直接回车，不需要输入 1 再回车，也可以输入字符串回车进一步细化选项）：" \
                                  "$confirm_line" \
                                  "运行一下 repo-changes? 命令，帮我看一下都有哪些仓库有改动（可能要花 15 秒到几分钟时间）" \
                                  "请列出所有仓库列表，我手工从中选择"
                           )
           case "$selected_project" in
               当前已选择*)
                   break
                   ;;
               运行一下*)
                   repo_changes=$(
                       repo-changes\? | pn 1 | sort -u
                               )
                   if test -z "$repo_changes"; then
                       hint "你的所有 repo 下都没有改动，即将退出"
                       exit
                   fi
                   for r in $repo_changes; do
                       if test -z "${all_history_projects[$r]}"; then
                           all_history_projects[$r]=true
                           all_changed_projects=(
                               "${all_changed_projects[@]}"
                               $r
                           )
                       fi
                   done
                   hint "已帮你找出所有可能要 push 的 repo： $(string-join ', ' ${all_changed_projects[@]})"
                   break
                   ;;
               请列出所有*)
                   if test -z "all_projects"; then
                       all_projects=$(
                           my-rfa 'ap'
                                   )
                   fi
                   r=$(
                       select-args -p "请选择你想 push review 的仓库（第一个选项可直接回车，不需要输入 1 再回车，也可以输入字符串回车进一步细化选项）" \
                                   $all_projects
                    )
                   if test ! -d "$r"/.git; then
                       die "你输入的目录 $r 不是一个 git 仓库"
                   fi

                   all_history_projects[$r]=true
                   if repo-is-dirty "$r"; then
                       all_changed_projects=(
                           "${all_changed_projects[@]}"
                           $r
                       )
                   elif yes-or-no-p -y "你选的这个仓库 $r 没有需要提交的改动。请问下次全局 push 的时候是否默认检查这个仓库？"; then
                       true
                   else
                       unset all_history_projects[$r]
                   fi
                   ;;
           esac
       done
    fi

    declare -p all_history_projects > ~/.config/gerrit-push-review.projects

    if test "${#all_changed_projects[@]}" != 0; then
        for p in "${all_changed_projects[@]}"; do
            (
                cd "$p"
                if yes-or-no-p -y "请确认是否要提交 $(ap) 这个仓储（如果不能马上确认，请自己再开一个终端窗口查看详细改动）"; then
                   gerrit-push-review "$@"
                fi
            ) || true
        done
    fi
    exit
fi

if git status -s | grep -q .; then
    if is-jenkins; then
        cat <<EOF | mail-cms -i "Gerrit-push-review exited in $PWD @ $(jenkins-info)"
以下是尚未提交的改动，请先提交再重试 $0:" "$@"

$(git status -s)

EOF
        exit 1
    elif yes-or-no-p -y "你的 git 仓储还有改动，是否要退出？"; then
        echo
        echo "以下是尚未提交的改动，请先提交再重试 $0:" "$@"
        git status -s
        exit
    fi
fi

function confirm-with-repo() {
    if ! yes-or-no-p -y "根据 repo manifest.xml 计算出你的 remote 是 $(repo-remote) ，远程分支是 $(repo-branch)，确认？"; then
        die "不知道如何自动帮你提交 review，请自己确定远程名、分支名，然后运行 git push 远程名 HEAD:refs/for/ 分支名"
    fi
}

if test "$gpr_to_branch"; then
    export REPO_BRANCH=$gpr_to_branch
else
    head_branch=$(git symbolic-ref --short HEAD 2>/dev/null || true)
    merge_head=
    if test "$head_branch"; then
        merge_head=$(git config branch.$head_branch.merge | perl -npe 's!^refs/heads/!!' || true)
        if test -z "$merge_head"; then
            if test "$(repo-remote)" -a "$(repo-branch)"; then
                hint "你的本地分支 $head_branch 没有对应的远程服务器分支，但你的 git 仓储是一个 repo 仓储，将使用 repo manifest.xml 里提供的信息决定要 push 的远程目标分支名称"
                head_branch=
                merge_head=
            fi
        fi
        export REPO_REMOTE=$(git config branch.$head_branch.remote)
        if test "$merge_head" -a "$merge_head" != "$head_branch" -a "$merge_head" != refs/heads/$head_branch; then
            head_branch=$merge_head
        fi
    fi

    if test "$head_branch" && yes-or-no-p -y "你的 git 设置了远程跟踪分支 $head_branch ，是否要 push 到此分支？"; then
        export gpr_to_branch=$head_branch
        export REPO_BRANCH=$gpr_to_branch
        if test -z "$REPO_REMOTE" -a -z "$merge_head"; then
            export REPO_REMOTE=$(git rev-parse --abbrev-ref HEAD@{upstream} | perl -npe 's!/.*!!')
        fi
    else
        detached_branch=$(git status|head -n 1|perl -ne 'print $1 if m/^HEAD detached (?:at|from) (\S+\/\S+)/' || true) ## pipe fail!
        if test "$detached_branch" && yes-or-no-p -y "你的当前无名分支是从远程的 $detached_branch 上直接 checkout 出来的，是否要 push 到此分支？"; then
            export gpr_to_branch=${detached_branch#*/}
            export REPO_BRANCH=$gpr_to_branch
            if test -z "$REPO_REMOTE"; then
                export REPO_REMOTE=${detached_branch%%/*}
            fi
            hint "下回 git checkout 时可以试一下加一个 -B 参数，设置一下上下游的跟踪关系，尤其是可以试一下直接 git co -B，system-config 会把所有分支列出来让你选"
        else
            confirm-with-repo
        fi
    fi
fi

if test "$gpr_repo_remote" -a "$REPO_REMOTE" -a "$gpr_repo_remote" != "$REPO_REMOTE"; then
    die "你指定了 --repo-remote=$gpr_repo_remote，但跟环境变量 REPO_REMOTE ($REPO_REMOTE) 的值不一致，不知如何处理"
elif test -z "$REPO_REMOTE"; then
    export REPO_REMOTE=$gpr_repo_remote
fi

# git pull ssh://hjbao@bear:29418/android/platform/external/rayzerlink-tools refs/changes/74/474/1
if test -z "$gpr_review_push_url"; then
    export gpr_review_push_url=$( (repo-review-url|perl -npe 's!:8080/r/!:/!') )
fi

if test $gpr_do_rebase = true; then
    echo git fetching remote: $(repo-remote), branch: $(repo-branch)
    if test "$(git config remote.$(repo-remote).url)" != "$gpr_review_push_url"; then
        git config remote.$(repo-remote).url "$gpr_review_push_url"
    fi

    if test -z "$(lookup-file -e .repo)" || [[ $PWD =~ /\.repo/manifests ]]; then
        git fetch -n -v $(repo-remote) $(repo-branch)
    else
        git fetch -n $(repo-remote) $(repo-branch) || repo sync -c -n $(repo-project) || git fetch -n origin
    fi
    echo git fetch done
fi

if test $gpr_do_rebase = true && ! git-is-ancestor $(repo-remote-branch) HEAD >/dev/null 2>&1; then
    if yes-or-no-p -y "远程有提交，需要先 rebase 到远程（共需 rebase $(git log $(repo-remote-branch)..HEAD --pretty=%H|wc -l) 个 patch），自动处理？"; then
        git rebase $(repo-remote-branch) ||
        die "Rebase 失败，请自己手动解决冲突"
    else
        die "Not fast-forward push is not allowed"
    fi
fi

if test "$gpr_skip_gerrit" = false; then
    n_commits=$(git log $(repo-remote-branch)..${gpr_push_rev} --pretty=%H|wc -l)

    if test "$n_commits" = 0; then
        echo "你的本地仓储没有改动需要提交到远程服务器。（你当前的 HEAD 跟服务器上对应分支的 HEAD 完全一致，请确认你是不是已经 git commit 过了？）"
        exit 0
    fi
    if test "$n_commits" != 1; then
        if ! yes-or-no-p -y "你要一次提交多个（$n_commits 个）patch，确认？"; then
            die "请确认自己是否要提交多个 patch"
        fi
    fi
fi

reviewers=()
if test $# = 0; then
    if true; then
        set -- $(git config user.email)
    else
        die "Error: Usage $(basename $0) REVIEWER..."
    fi
fi

if test -e ~/src/github/smartcm/etc/team-map; then
    . ~/src/github/smartcm/etc/team-map
fi

while test $# -gt 0; do
    if test "${team_map[$1]}"; then
        tmp_reviewers=${team_map[$1]}
        shift
        set -- $tmp_reviewers "$@"
    fi
    reviewers=("${reviewers[@]}" "$(echo "${1%@*}"|perl -npe 's/.*<//')")
    shift
done

if is-tty-io && test $gpr_skip_local_review != true && yes-or-no-p -y "在请别人 review 之前，要不要先自己本地 review 一下（加 -R 参数可以跳过此提示）"; then
    (
        cd $(lookup-file-dir -P -e .git)
        git-interactive-add -r "$(repo-remote-branch)" -b HEAD
    )
fi

if is-jenkins; then
    atexit() {
        if test "$?" != 0; then
            cat ~/.cache/system-config/logs/gerrit-review.log.$$ | mail-cms -i "Gerrit-push-review failed in $PWD @ $(jenkins-info)"
        fi
    }

    trap atexit 0
fi

for try in $(seq 1 10); do
    if ! (
            if [[ "$(git log --pretty=%ae -1 "$gpr_push_rev")" =~ cmbuild@ ]] && ! is-jenkins; then
                die "Must not push with author as cmbuild@"
            fi

            push_where=refs/for
            if test "$gpr_draft" = true; then
                push_where=refs/drafts
            fi

            if test "$gpr_skip_gerrit" = true; then
                push_where=refs/heads
            fi
            if ! git push --no-thin --receive-pack="$(
                echo -n 'git receive-pack ';
                for x in "${reviewers[@]}"; do
                    echo -n "--reviewer=$x "
                done)" "$gpr_review_push_url" "$gpr_push_rev":$push_where/`repo-branch`$(if test "$gpr_patch_topic"; then echo /"$gpr_patch_topic"; fi) 2>&1; then
                exit 1
            fi
            echo
            echo '* git commit message:'
            echo
            git log -1 "$gpr_push_rev"
        ) | perl  -npe 's/\033\[./ /g' |tr '\r' '\n'| tee ~/.cache/system-config/logs/gerrit-review.log.$$; then
        if grep -q 'internal error while processing changes\|(Synchronous hook timed out' ~/.cache/system-config/logs/gerrit-review.log.$$; then
            echo There is an error, need retry git push...
            sleep 5
        elif grep -q 'No changes between prior commit' ~/.cache/system-config/logs/gerrit-review.log.$$; then
            # No changes between prior commit fca78b8 and new commit 525a96a
            prior_commit=$(cat ~/.cache/system-config/logs/gerrit-review.log.$$ | grep -o 'No changes between prior commit \S+' -P | pn 6)
            current_commit=$(cat ~/.cache/system-config/logs/gerrit-review.log.$$ | grep -o 'No changes between prior commit.*' -P | pn 10)

            if yes-or-no-p -y "你的某个改动($current_commit)之前已经提交过 gerrit review($prior_commit)，需要先 rebase 到那个改动上去，自动执行？"; then
                review_ref=$(git ls-remote $(repo-remote) | grep ^$prior_commit | pn 2 | head -n 1)
                git fetch $(repo-remote) "$review_ref"
                if test "$(git log -1 --pretty=%h FETCH_HEAD)" != $prior_commit; then
                    die "不知道如何获取 $prior_commit"
                fi
                git rebase $prior_commit
                continue
            else
                exit 1
            fi
        elif grep -q '(no new changes)' ~/.cache/system-config/logs/gerrit-review.log.$$; then
            if test "${#reviewers[@]}" != 0; then
                change_id=$(gerrit-change-id)
                for x in "${reviewers[@]}"; do
                    gerrit -- set-reviewers "$change_id" -a "$x"
                done
                hint "你的改动之前已经提交过 gerrit review，本次 push 只帮你添加了 Reviewer（如果以前没有添加过的话）"
                break
            else
                hint "Gerrit 提示没有新的改动，你以前已经提交过这个 Review 了。如果想添加 Reviewer 的话，请重新运行此命令，并在后面添加 Reviewer Gerrit 账号名字（一般就是邮箱前缀）"
            fi || true
        elif grep -q '(change .* closed)' ~/.cache/system-config/logs/gerrit-review.log.$$; then
            change_url=$(grep -o '(change .* closed)' ~/.cache/system-config/logs/gerrit-review.log.$$ | pn 2)
            die "你想提交的某个改动好像已经被 close 掉了（比如被 abandon 掉了），请在此页面将其重新打开然后重试：$change_url"
        else
            die "gerrit-push-review 发生错误，请仔细阅读上面的出错信息并尝试解决，如不能自己解决，请联系自己的 Leader 或 CM 协助"
        fi
    else
        break
    fi
done

if ! is-jenkins; then
    set +x
fi
echo push ok.

(
    cd $(lookup-file-dir -P .git)
    set -e
    test -e .git
    if test -e .gerrit-hooks; then
        echo gerrit hooks found, push for review.
        bash .gerrit-hooks push-for-review
    fi
)

mv ~/.cache/system-config/logs/gerrit-review.log.$$ ~/.cache/system-config/logs/gerrit-review.log

if test -e ~/.local-config/etc/after-gerrit-push-review; then
    . ~/.local-config/etc/after-gerrit-push-review
fi
