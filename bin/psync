#!/bin/bash
set -e

me=$(readlink -f $0)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $0)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi

abs0=$0
if ! [[ $abs0 =~ ^/ ]]; then
    if [[ $abs0 =~ / ]] && test -e $PWD/$abs0; then
        abs0=$PWD/$abs0
    elif test -e "$(which $0)"; then
        abs0=$(which $0)
    else
        die "Can't find abs path for $0"
    fi
fi

b0=$(basename $0)

## start code-generator "^\\s *#\\s *"
# generate-getopt rreverse @follow-symlink Sgit-st \
    # t:target-dir @delete cchecksum \
    # @gitp='("" --gitp)'
## end code-generator
## start generated code
TEMP=$( getopt -o cSrt:h \
               --long checksum,delete,follow-symlink,git-st,gitp,reverse,target-dir:,help,no-checksum,no-delete,no-follow-symlink,no-git-st,no-gitp,no-reverse \
               -n $(basename -- $0) -- "$@")
declare checksum=false
declare delete=false
declare follow_symlink=false
declare git_st=false
declare gitp=
declare reverse=false
declare target_dir=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -c|--checksum|--no-checksum)
            if test "$1" = --no-checksum; then
                checksum=false
            else
                checksum=true
            fi
            shift

            ;;
        --delete|--no-delete)
            if test "$1" = --no-delete; then
                delete=false
            else
                delete=true
            fi
            shift

            ;;
        --follow-symlink|--no-follow-symlink)
            if test "$1" = --no-follow-symlink; then
                follow_symlink=false
            else
                follow_symlink=true
            fi
            shift

            ;;
        -S|--git-st|--no-git-st)
            if test "$1" = --no-git-st; then
                git_st=false
            else
                git_st=true
            fi
            shift

            ;;
        --gitp|--no-gitp)
            if test "$1" = --no-gitp; then
                gitp=
            else
                gitp=--gitp
            fi
            shift

            ;;
        -r|--reverse|--no-reverse)
            if test "$1" = --no-reverse; then
                reverse=false
            else
                reverse=true
            fi
            shift

            ;;
        -t|--target-dir)
            target_dir=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-c, '
            printf %-24s '--[no-]checksum'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]delete'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]follow-symlink'
            echo
            printf %06s '-S, '
            printf %-24s '--[no-]git-st'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]gitp'
            echo
            printf %06s '-r, '
            printf %-24s '--[no-]reverse'
            echo
            printf %06s '-t, '
            printf %-24s '--target-dir=TARGET_DIR'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

. .set-true-val checksum --checksum
. .set-true-val follow_symlink -L
. .set-true-val git_st --files-from=-
. .set-true-val delete --delete

saved_target_dir=${target_dir}

if test -z "${target_dir}"; then
    target_dir=$(up .)
fi

if [[ "$target_dir" =~ $HOME/ ]]; then
    target_dir=\~/${target_dir#$HOME/}
elif test "$target_dir" = "$HOME"; then
    target_dir=\~
fi

if is-in-emacs; then

    if test "${b0}" = Wsync; then
        nohup setsid bash -c 'set -x; Wrench.sh "wrench_post($(lua-quote-string "$(emacs-current-text)"))"' </dev/null > ~/tmp/psync.log 2>&1&
        exit
    fi
    if test $# = 0; then
        psync_host=$(get-about-me psync-host)
        if test "${psync_host}"  = unknown; then
            set -- cmdev
        else
            set -- "${psync_host}"
        fi
    fi

    if test "$#" = 1; then
        nohup setsid bash -c "$(
cat <<'EOFb52d0b099efd' | . .replace-%% --
# {%sh-mode%}
set -x;
emacs_current_file=$(emacs-current-file)

extra_dir=
if test "<%gitp%>"; then
    extra_dir=/$(cd ${emacs_current_file%/*}; gitp .)
fi

CHECK_ORG=true out-of-emacs bash -x "<%b0%>" \
         -t "<%saved_target_dir%>"${extra_dir} "$@" "$(emacs-current-file)"
# {%/sh-mode%}
EOFb52d0b099efd

)" true "$@" </dev/null > ~/tmp/psync.log 2>&1&
        exit
    fi
fi

if test $# = 0 -o $# = 1; then
    cd ~/system-config/

    function do_1() {
        (
            echo working with "$@"
            cd "$2" || exit
            psync "$1" .
        )
    }
    export -f do_1

    function do_x() {
        . ~/system-config/etc/github-projects
        (
            echo ~/system-config/
            echo ~/external/local/
            for x in "${github_projects[@]}" "${smartcm_projects[@]}"; do
                echo ~/src/github/$x
            done
        ) | xargs -P 5 -n 1 bash -c "do_1 $x \$@" true
    }

    if test $# = 1; then
        x=$1
        do_x
        exit
    fi

    if test "$ABC_REMOTE_HOST"; then
        x=$ABC_REMOTE_HOST
        do_x
        exit
    fi
    x=cmdev
    do_x
    exit
fi

host=$1
shift

if test "${b0}" = psync; then
    ssh $host mkdir -p "$target_dir"
elif test "${b0}" = jsync; then
    emacs_target_dir=${target_dir#\~/}
    emacs_target_dir=$(eval echo "${emacs_target_dir}")
    emacs_target_dir=$(emacs-quote-string "${emacs_target_dir}")

    target_dir=$(emacs-quote-string "${target_dir}")

    emacsclient -e "$(
cat <<'EOFda3074d5015b' | . .replace-%% --
; {%emacs-lisp-mode%}
(let ((default-directory "/jssh:<%host%>:"))
  (shell-command-to-string (format "(set -x; mkdir -p %s) 2>&1" "<%target_dir%>")))
; {%/emacs-lisp-mode%}
EOFda3074d5015b

)"
fi

if test -e psync-exclude.rc -a -z "$delete"; then
    local_exclude="--exclude-from $PWD/psync-exclude.rc"
else
    local_exclude=
fi

if test "$git_st"; then
    cd $(dirname $(lookup-file -e .git))
fi
if test "$git_st"; then
    . .gitx
    (git st -S | grep .) | cut -b 4-|perl -npe 's/.* -> /\n/'
fi |
if test "$reverse" = true; then
    for x in "$@"; do
        my-rsync $git_st $follow_symlink $checksum -av $host:"$target_dir"/$x $(dirname $x) --exclude .repo --exclude .git --exclude .gitmodules --exclude "*#*" --exclude ".#*" $local_exclude --progress
    done
else
    if lookup-file -e .git >/dev/null 2>&1 && ! lookup-file -e .is-private-git; then
        for x in "$@"; do
            if test -d "$x"; then
                chmod a+rx "$x"
            elif test -f "$x"; then
                chmod a+r "$x"
                if test -x "$x"; then
                    chmod a+x "$x"
                fi
            fi
        done
    fi

    if test "${b0}" = psync; then
        my-rsync $git_st $follow_symlink $checksum -av "$@" $host:"$target_dir" --exclude .git --exclude .repo --exclude "*#*" --exclude ".#*" $delete $local_exclude --progress
    elif test "${b0}" = jsync; then
        for x in "${@}"; do
            if test -f "${x}"; then
                source_file=$(emacs-quote-string "$(readlink -f "${x}")")
                target_file="${emacs_target_dir}"/"${source_file##*/}"
                emacsclient -e "$(
cat <<'EOF0ecb2235bec3' | . .replace-%% --
; {%emacs-lisp-mode%}
(let ((before-save-hook))
  (find-file "/jssh:<%host%>:<%target-file%>")
  (read-only-mode -1)
  (delete-region (point-min) (point-max))
  (insert-file-contents "<%source-file%>")
  (save-buffer)
  (kill-buffer))
; {%/emacs-lisp-mode%}
EOF0ecb2235bec3

)"
            fi
        done
    fi
    if test "$CHECK_ORG" = true && [[ $1 =~ \.org$ ]]; then
        x=$1
        (
            tangle_target=$(grep -o ':tangle\s+\S+\s+' -P "$x" -i |pn 2)
            tangle_target=$(expand-file-name "$tangle_target")
            if test -e "$tangle_target" -a "$x" -nt "$tangle_target"; then
                bhj-notify hello "tangle and sync ${x##*/}"
                emacsclient -e '(progn (find-file "'"$x"'") (org-babel-tangle))'
            fi
            cd "$(dirname "$tangle_target")"
            $b0 "$host" "$(bp "$tangle_target")"
        )
    fi

fi
