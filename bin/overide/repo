#!/bin/bash
set -e
if test "$SYSTEM_CONFIG_INITED" != true; then
    . ~/system-config/.bashrc
fi

if [[ $PWD =~ /\.repo($|/) ]]; then
    cd $(lookup-file .repo)/..
fi

deltmpdir=.repo/delete-later
clean-up() {
    (
        rmdir=${deltmpdir}.$$
        mkdir -p "$rmdir"
        if test "$#" = 0; then
            set -- * .repo/project-objects .repo/projects
        fi
        for x in "$@"; do
            mv "$x" "$rmdir"/${x//\//%} || true
        done
        rm "$rmdir" -rf&
    )
}

repo-clean-after-init() {
    # 这部分的逻辑是这样的，因为我们服务器有限，必须复用工作空间。
    # 在复用工作空间的过程中，会发生这样的一种现象：
    #
    # 1. A 项目较新，它有一个 X/Y/Z 目录，它是一个 git 仓库，同时 X/Y 目录也是一个 git 仓库
    # 2. B 项目较老，它只有一个 X/Y 目录是 git 仓库，没有 Z 子目录。
    #
    # 这种情况下，如果我们先编译过 A、再编译 B 的时候，该怎么确保 Z 子目录被正确删除呢？
    #
    # 注意，只在每个 git 仓库下做 git reset --hard; git clean -xfd 是
    # 不够的，如果一个子目录是一个 git 仓库的话，在上层 git 仓库目录
    #  clean 也不会删掉这个子目录。（而且从某种角度来讲，我们其实不希
    # 望每次都删除子目录 git 仓库，因为还要考虑到上一次编 A，下一次还
    # 编 A 的情况，这时每次都删掉 Z 子目录的话，就会导致不得不重新下载
    # 这个仓库）
    #
    # 我们也考虑过使用 repo 命令自带的 project.list 文件，里面给出了所有
    # git 仓库的列表，我们把这个列表里不属于本项目的仓库全部删掉就可以
    # 了。
    #
    # 但是！有一种情况下，这个 project.list 文件是错误的，那就是先编了
    #  B（project.list 是 B 项目的），再编 A，但是 A 在代码同步到一半
    # 的时候，就被 abort 掉了。然后 X/Y/Z 目录已经存在，但是
    #  project.list 还没有更新成 A 的，还是 B 的，下次再编 B 的时候，
    # 我们就不知道 X/Y/Z 的存在，让它参与了编译，最后导致编译出错。
    #
    # 解决的方案是每次代码在 repo init 结束的时候，就生成一个
    # project.list-from-init，但在生成之前，要把上一次的
    # project.list-from-init -- 如果有的话 -- 重命名为
    # project.list-last-init。
    #
    # 后续在清理的时候，要把 project.list-last-init 也当成一个仓库列表
    # 跟 project.list 一起使用（事实上应该仅使用
    # project.list-last-init 一个就够，但这里选择一起使用）。如果没有
    # project.list-last-init 文件的话，直接删掉所有 =.repo/..= 下的非
    # 隐藏子目录（为了安全考虑，这样的代码树可能是老的初始化方法遗留下
    # 来的，说不定已经存在 X/Y/Z 这样的问题仓库了，这个仓库可能会导致
    # 编译一直失败，如果一直分配到这个工作空间下编译 B 项目的话）。

    start-record-time "do-repo-init-clean"

    if test ! -e .repo/project.list-from-init; then
        mkdir -p ${deltmpdir}.$$
        mv * ${deltmpdir}.$$ || true
        rm -rf ${deltmpdir}.*& # just in case some is left from last time.
        touch .repo/project.list-from-init # make sure the next mv command is ok:D
    fi

    mv .repo/project.list-from-init .repo/project.list-last-init
    repo-xml-sel -t -m //project -v @path -o ' ' -v @name -n .repo/manifest.xml |
        while read path name; do
            echo $path
        done > .repo/project.list-from-init

    # in repo-external, we will handle .repo/project.list-last-init.
    repo-external --do-delete &&
        rm  .repo/project.list -f &&
        scm -x check-manifests-project-reuse --do-clean || (
            mail-cms --add-delay 300 "Can't force manifest reuse projects, will force clean"&
            clean-up * .repo/projects
        )
    (
        my-rfa 'clean-a-repo' || true
        cd .repo
        rm repo-paths repo_info.pl -f
    )
    end-record-time "do-repo-init-clean"
}

function delete-1-project() {
    project=$1
    path=$(
        repo-xml-sel -t -m //project"[@path = '$project' or @name = '$project']" -v @path -n .repo/manifest.xml
        )
    if test -z "$path"; then
        path=$project
    fi
    project=$(
        repo-xml-sel -t -m //project"[@path = '$project' or @name = '$project']" -v @name -n .repo/manifest.xml
           )
    if test -z "$project"; then
        project=$path
    fi
    if test -z "$path" -o -z "$project"; then
        mail-cms -s -e "Can't decide path and project"
        die "Can't decide path and project for $project"
        exit 1
    fi
    (
        # 这样做的原因是有一次发生在 packages/apps/SoundRecorder 这个仓库，
        # 它在 manifest 里有两行跟它对应，一行是 aosp 的，一行是我司自己的，
        # 如果按以前的写法，就删不掉出错的仓库，导致最后不得不全部重新下载。
        for path in $path $project; do
            rm -rf $path .repo/projects/$path.git
        done
    )
    (
        for project in $path $project; do
            rm -rf .repo/project-objects/$project.git
        done
    )

}

wait-a-while() {
    sleep ${1:-30.12345678} || true
}

export -f wait-a-while

function clean-a-repo() {
    if test -d .git; then
        exec 9> .git/sc-clean-repo.lock
        flock 9
        if git reset --hard && git clean -xfd; then
            echo clean: $PWD
            exit 0
        else
            echo Failed to clean: $PWD
            rm $PWD -rf
            cd ..
            if git_dir=$(lookup-file -e .git/..); then
                cd "$git_dir"
                if lookup-file -e .repo/..; then
                    clean-a-repo
                fi
                exit 0
            else
                (wait-a-while && mail-cms -o "Warn: repo failed to clean: $PWD")& # this way, there won't be a mail when jenkins task is aborted
                exit 1
            fi

        fi
    fi
}

export -f clean-a-repo

if test "$1" = init; then
    rm -rf $deltmpdir.*& # just in case some is left from last time.
    set -- "$@" --repo-branch=master --no-repo-verify
    if is-jenkins; then
        scm repo-init-check-df
        if test -e .repo/project-objects/repo-too-large; then
            (
                clean-up
            ) || true
        fi
        if scm is-cms && ! echo "$@" | grep test-account@; then # maybe want to test for other accounts
            set -- "$@" -g all,-build-err --reference /data/mirror
        elif ! scm is-cms && test -e ~/.config/system-config/repo-init.extargs; then
            set -- "$@" $(cat ~/.config/system-config/repo-init.extargs)
        fi
    fi
    if test -e .repo/manifest.xml; then
        repo-xml-sel -t -m //copyfile -v @dest -n .repo/manifest.xml|xargs rm -f
    fi || true
    if test -e .repo -a ! -e .repo/manifest.xml; then
        rm -f .repo/manifest.xml
    fi
fi

old_manifest_target=
if is-jenkins; then
    set -x
    if test "$1" = init; then
        if test "$SMARTCM_FORCE_MIRROR" = true; then
            set -- "$@" --reference ~/src/android-mirror
        elif test "$SMARTCM_FORCE_MIRROR" = NO; then
            true # do nothing
        else
            set -- "$@" --reference ~/src/no-such-mirror --depth 1
        fi
        scm check-df
        if test -e .repo/manifest.xml; then
            old_manifest_target=$(readlink -f .repo/manifest.xml)
        fi
    fi
    if test "$1" = init -a -d .repo/manifests/.git; then
        echo "will now do repo init, but no sync yet." > .repo/grep-errors.txt
        (
            cd .repo/manifests
            git reset --hard
            git clean -xfd
            find . -type f -name '*.xml'|xargs touch /dev/null
        )
        if (
            cd .repo/manifests/
            git tag 2>&1 | grep -q 'does not point to a valid object'
        ); then
            rm .repo/manifests .repo/manifests.git .repo/manifest.xml -rf
        fi
    fi
fi

if test "$1" = init; then
    (
        if test -d .repo; then
            cd .repo
            rm repo-paths repo_info.pl -f
        fi
    ) || true
fi


if is-jenkins; then
    . ~/src/github/smartcm/scm-helpers/collect-time.help
fi

if test "$1" = sync -a "$(arg1-arg2 -- -h "$@")" = -h -a "$(arg1-arg2 -- --help "$@")" = --help; then
    if is-jenkins; then
        start-record-time "do-repo-sync"
    fi

    if test -d "$(lookup-file -e .repo/manifests)"; then
        (
            cd $(lookup-file .repo/manifests)
            git_remote_url=$(git-remote-url || true)
            if [[ $git_remote_url =~ ^smartisan: ]]; then
                git config remote.origin.url ssh://gerrit.smartisan.cn/${git_remote_url#smartisan:}
            elif ! git-remote-url | grep :// -q; then
                if is-jenkins; then
                    die "Can't download source code from $(git-remote-url)"
                else
                    hint "你的 repo init 初始化参数使用方法已过时，最新方法需要使用 -u ssh:// 的格式，否则代码同步可能出错"
                    hint "请使用 repo-switch -p 查看你之前 repo init 时使用的命令，然后改一下 -u 参数，重新 repo init 一遍"
                fi
                fi
        ) || true
    fi
    set -- "$@" --no-tags
    if grep -e --force-sync .repo/repo/subcmds/sync.py >/dev/null 2>&1; then
        set -- "$@" --force-sync
    fi

    repo_sync_log=~/tmp/repo-sync.log.$$
    if (
        set -o pipefail
        if is-jenkins; then
            time stdbuf -oL -eL ~/system-config/bin/repo "$@" 2>&1 | stdbuf -oL -eL tee $repo_sync_log
        else
            touch $repo_sync_log || true
            time ~/system-config/bin/repo "$@"
        fi
    ); then
        rm $repo_sync_log -f
        if option-included -n "$@"; then
            true
        elif is-jenkins; then
            true # no need to config on jenkins, let's assume we won't fetch tags.
        else
            (my-rfa 'git config remote.$(repo-remote).tagopt --no-tags' >/dev/null 2>&1&)
        fi || true
    else
        ret=$?
        if is-jenkins && test "$REDO_REPO_SYNC" != true; then
            if test -e .repo/do-not-retry-sync; then
                exit 1
            fi
            export REDO_REPO_SYNC=true
            (
                for temp_retry in $(seq 1 20); do
                    ## should just do retry
                    if grep "Permission denied (publickey)" $repo_sync_log &&
                            ## should just do retry 2
                            grep "fatal: Could not read from remote repository" $repo_sync_log || (
                                (
                                    ## check if some projects failed which can be fixed
                                    grep 'error: Cannot remove project ".*":' $repo_sync_log ||
                                        grep 'error: Cannot fetch' $repo_sync_log ||
                                        grep 'fatal: expected shallow/unshallow, got ERR internal server error' $repo_sync_log ||
                                        grep 'Disconnecting: Protocol error: expected packet type 31, got 94' $repo_sync_log ||
                                        grep 'fatal: remote error: want .* not valid' $repo_sync_log ||
                                        (
                                            grep 'error: The last gc run reported the following. Please correct the root cause' $repo_sync_log &&
                                                grep 'and remove .*\.repo/projects/.*/gc.log' $repo_sync_log
                                        ) ||
                                        grep 'error: .*: .* checkout [0-9a-f]{40}' -P $repo_sync_log ||
                                        grep -o 'error.GitError: .* rev-list .*: ' $repo_sync_log | grep -v 'manifests rev-list'
                                ) && (
                                    ## fix failed projects.
                                    remove_projects=$(
                                        grep 'error: Cannot remove project ".*?":' $repo_sync_log -o -P | pn 2 \" |
                                            grep . # make sure there are some projects that match.
                                                  ) ||
                                    projects=$(
                                        (
                                            grep 'error: Cannot fetch' $repo_sync_log | pn 4
                                            perl -ne 'print $1 if m,and remove .*?\.repo/projects/(.*)\.git/gc.log,' $repo_sync_log
                                            grep 'error: .*: .* checkout [0-9a-f]{40}' -P $repo_sync_log | pn 3
                                            grep -o 'error.GitError: .* rev-list .*: ' $repo_sync_log | grep -v 'manifests rev-list' | pn 2
                                        ) | grep . # make sure there are some projects that match.
                                            ) &&
                                        (
                                            for project in $projects $remove_projects; do
                                                delete-1-project $project
                                            done
                                            if test "${remove_projects}"; then
                                                repo "$@" # retry sync after removed a useless project
                                            fi
                                        ) && (
                                            if test -z "${projects}"; then
                                                exit 0
                                            fi
                                            for x in $(seq 1 3); do
                                                wait-a-while
                                                ~/system-config/bin/repo "$@" -j2 $projects && exit 0 || echo failed to re-run@$x: repo "$@" -j2 $projects
                                            done
                                            exit 1
                                        ) && (
                                            echo "$projects" | mail-cms -i -e -o "Info: 'single project fetch error:' in jenkins repo sync and fixed: @$temp_retry" ||
                                                true
                                        )
                                )
                            ) || (
                                ## manifest.git error, need run repo init again
                                if manifest_error=$(
                                        (
                                            grep '^project .repo/manifests/' $repo_sync_log &&
                                                grep 'fatal: refusing to merge unrelated histories' $repo_sync_log
                                        ) || (
                                            grep 'manifests rev-list.*error: Could not read' $repo_sync_log &&
                                                grep 'fatal: revision walk setup failed' $repo_sync_log
                                        )
                                                 ); then
                                    repo_init_command=$(repo-switch -p)
                                    rm .repo/manifest.xml .repo/manifests .repo/manifests.git -rf
                                    $repo_init_command
                                    (
                                        cat <<EOF
在 repo sync 的时候发现 manifest 仓库无法同步，出错信息如下：

"$(echo "$manifest_error"|indent-stdin)"

因为重新 repo init 之后无法确保 manifest、revision 相同（考虑到有 rebuild 的情况），因此接下来会自动重启当前 job，请 CM 关注一下（比如是否反复重启）。
EOF

                                    ) | mail-cms -i -e -o "Info: repo manifest need re-init to fix repo sync error"

                                    # 不能自动修复这种错误。万一这是一个重编某版本的任务，现在正在重新
                                    # 同步代码，我们重新 repo init 过了，是不可以再 repo sync 的，必须重启任务
                                    scm jc-rebuild --do-sleep 15 --rebuild-reason 'RepoSyncManifestError'
                                    scm jc-abort
                                    kill $$
                                else
                                    scm jc-rebuild --rebuild-reason 'RepoSyncManifestError' --clear-rebuild
                                fi
                                exit 1 # 不是这种错误，下方的“||”会继续查错
                            ) || (
                                if ! grep 'error.GitError: cannot initialize work tree' $repo_sync_log; then
                                    exit 1
                                fi
                                if ! grep 'error.GitError: cannot initialize work tree: ' $repo_sync_log; then
                                    (
                                        cd $(lookup-file .repo/repo)
                                        git fetch origin master
                                        git reset --hard origin/master
                                    )
                                    exit 0 # next time, let's hope the work tree info will be printed.
                                fi

                                failed_project=$(
                                    grep 'error.GitError: cannot initialize work tree: ' $repo_sync_log | perl -npe 's/.*cannot initialize work tree: //'
                                              )

                                for p in $failed_project; do
                                    if test -d "$p"; then
                                        rm -rf "$p"
                                    fi
                                done
                                echo $failed_project | mail-cms -i -e -o "Removed some corrupted work trees for repo sync retry." || true
                                exit 0

                            ); then
                        # this might be temporary
                        wait-a-while
                        if (
                            set -o pipefail
                            time stdbuf -oL -eL ~/system-config/bin/repo "$@" 2>&1 | stdbuf -oL -eL tee $repo_sync_log
                        ); then
                            mail-cms "Info: Jenkins repo sync repaired after retry: $temp_retry."
                            rm $repo_sync_log
                            exit 0
                        else
                            continue
                        fi
                    else
                        break
                    fi
                done

                if grep "Couldn't find remote ref" $repo_sync_log; then
                    mail-cms -i -e "你的 manifest 文件可能有问题，有一个分支找不到： $(readlink .repo/manifest.xml)" <<<"$(
                        echo "请查看下面的 log，出错的关键字是：fatal: Couldn't find remote ref"
                        echo
                        grep 'find remote ref' -C 10 "$repo_sync_log")"
                    exit 1
                fi
                (
                    cd $(lookup-file -e .repo/manifests)
                    if test "$(git config repo.mirror)" = true; then
                        readlink -f .repo/manifest.xml |
                            mail-cms -e -i "Jenkins mirror repo sync failed for $(jenkins-info)"
                        exit 1
                    fi
                )
                cd $(lookup-file -e .repo/..)
                clean-up

                mail-cms "Warn: Jenkins repo sync failed for $JOB_NAME, will remove all and try again"
                if ~/system-config/bin/repo "$@"; then
                    exit 0
                fi

                wait-a-while && # sometimes we are being aborted!
                    mail-cms -e "Repo sync failed after retry!"
                exit 1
            )
        else
            exit $ret
        fi
    fi
    if is-jenkins; then
        echo "repo sync completed" >> .repo/grep-errors.txt
        scm check-repo-project-objects
        end-record-time "do-repo-sync"
    fi
    exit
else
    if ~/system-config/bin/repo "$@"; then
        if test -d .repo && is-jenkins; then
            declare -x -p > .repo/jenkins.info
        fi
        if test "$1" = init -a ! -e .repo/using-fast-sync && is-jenkins; then
            repo-clean-after-init
        fi

        exit 0
    else
        ret=$?
        if test "$1" = init && is-jenkins; then
            rm -rf .repo/manifest.xml .repo/manifest.xml.old .repo/manifests .repo/manifests.git;
            echo 1>&2 "Deleted .repo files and retry"
            if try-rerun -e REPO-INIT repo "$@"; then
                exit 0
            else
                mail-cms -e "Repo init 多次失败, 请检查一下 log，确认 manifest 有没有问题"
            fi
        fi
        if test "$1" = init && find .repo/local_manifests -type f | grep . -q; then
            echo 1>&2 "Warning: you have local_manifest files, might cause error"
        fi
        exit $ret
    fi
fi
