#!/bin/bash
set -e

set -e

me=$(readlink -f $0)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $0)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi
b0=$(basename $0)

rere-help() {
    cat <<EOF

这个脚本用于一种非常常见的重构操作：重命名。它不仅替换文件内容，还会替
换文件名、软链接的名字和软链接指向。

比如，你有一个软链接， symlink -> this-file，如果你运行 $b0 symlink
lnk 的话，结果会变成： lnk -> this-file；如果你运行 $b0 this that 的话，
结果会变成 symlink -> that-file。

用例如下：

    $b0 hello world # 把所有 hello 替换成 world
    $b0 -p '\b' -P '\b' hello world # 把所有单独成词的 hello 替换成 world，忽略 helloooo。
EOF

}

## start code-generator "^\\s *#\\s *"
    # generate-getopt p:prepend P:postpend aask-replacer=true @use-git=true '?"要不要执行 git 检查"' \
        # f:change-files='()' '?"要修改哪些文件，可一次指定多个或指定多次（但不能混用），默认会自己搜索匹配的文件"' \
        # @perl-re='("" -P -P)' '?"by default, use grep -P (perl regexp)"'
## end code-generator
## start generated code
TEMP=$( getopt -o af:P:p:h \
               --long ask-replacer,change-files:,perl-re,postpend:,prepend:,use-git,help,no-ask-replacer,no-perl-re,no-use-git \
               -n $(basename -- $0) -- "$@")
declare ask_replacer=true
declare -a change_files=()
declare perl_re=-P
declare postpend=
declare prepend=
declare use_git=true
eval set -- "$TEMP"
while true; do
    case "$1" in

        -a|--ask-replacer|--no-ask-replacer)
            if test "$1" = --no-ask-replacer; then
                ask_replacer=false
            else
                ask_replacer=true
            fi
            shift

            ;;
        -f|--change-files)
            change_files=("${change_files[@]}" "$2")
            shift 2

            ;;
        --perl-re|--no-perl-re)
            if test "$1" = --no-perl-re; then
                perl_re=
            else
                perl_re=-P
            fi
            shift

            ;;
        -P|--postpend)
            postpend=$2
            shift 2

            ;;
        -p|--prepend)
            prepend=$2
            shift 2

            ;;
        --use-git|--no-use-git)
            if test "$1" = --no-use-git; then
                use_git=false
            else
                use_git=true
            fi
            shift

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %06s '-a, '
            printf %-24s '--[no-]ask-replacer'
            echo
            printf %06s '-f, '
            printf %-24s '--change-files=CHANGE_FILES...'
            echo
            printf "%30s" ""
            echo "要修改哪些文件，可一次指定多个或指定多次（但不能混用），默认会自己搜索匹配的文件"
            printf "%06s" " "
            printf %-24s '--[no-]perl-re'
            echo "by default, use grep -P (perl regexp)"
            printf %06s '-P, '
            printf %-24s '--postpend=POSTPEND'
            echo
            printf %06s '-p, '
            printf %-24s '--prepend=PREPEND'
            echo
            printf "%06s" " "
            printf %-24s '--[no-]use-git'
            echo "要不要执行 git 检查"
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

export ask_replacer
export prepend
export postpend

if test "${change_files}" -a ! -e "${change_files}"; then
    change_files=(
        $change_files
    )
fi

if test -z "$prepend" -a -z "$postpend" && [[ "$1" =~ ^\\b.*\\b$ ]]; then
    prepend="\b"
    postpend="\b"
fi

if test $# != 2; then
    die "Error: Usage $(basename $0) from to"
fi

# set -- "$(printf %q "$1")" "$(printf %q "$2")"
export ARG1=$1
export ARG2=$2


function die() {
    echo "$@"
    exit 1
}

function debug() {
    echo "$@" 1>&2
}

IFS=$'\n'

function get-files-r() {
    if test "${#change_files[@]}" != 0; then
        for x in "${change_files[@]}"; do
            echo "$x"
        done
    else
        find . -name '.git' -prune -o -type f -print | perl -npe 's#^\./##';
    fi
}

function get-files-this-dir() {
    if test "${#change_files[@]}" != 0; then
        for x in "${change_files[@]}"; do
            echo "$x"
        done
    else
        find . -maxdepth 1 -name '.git' -prune -o -print | perl -npe 's#^\./##' | grep -v $perl_re -e '^\.$';
    fi
}

if test "$use_git" = true && ! git-is-clean .; then
    git-interactive-add
    git-is-clean .
fi

test $# = 0 && die "must provide at least 2 args"
tmpf=/tmp/$(basename $0).$$
perlhash=$tmpf.hash
get-files-r > $tmpf
echo shit > $tmpf.tmp
cat $tmpf |
xargs -d \\n grep $perl_re -l -i -I -e "$1" |
xargs -d \\n bash -c 'for x in "$@"; do test -f "$x" -a ! -L "$x" && echo "$x is a match" 1>&2 && echo "$x"; done; echo '$tmpf.tmp true |
xargs -d \\n perl -npe '
BEGIN{
    $from = $ENV{ARG1};
    $to = $ENV{ARG2};
    $prepend = $ENV{prepend};
    $postpend = $ENV{postpend};

    warn "from is $from, to is $to\n";
}

$rep_save{$from} = $to;
$rep_save{lc $from} = lc $to unless (lc $from eq $from);
$rep_save{uc $from} = uc $to unless (uc $from eq $from);
$rep_save{ucfirst lc $from} = ucfirst lc $to unless (ucfirst $from eq $from);

while (m#($prepend$from$postpend)#ig) {
    if (defined $rep_save{$1}) {
        next;
    } else {
        if ($ENV{ask_replacer} eq "true") {
            system("echo please input your replacement for \"$1\" > /tmp/get-stdin.$$");
            chomp($rep_save{$1} = qx(get-stdin /tmp/get-stdin.$$));
            $rep_save{$1} =~ s/^please input your replacement for //;
        } else {
            $rep_save{$1} = $to;
        }
    }
}

for $key (keys %rep_save) {
    my ($from, $to) = ($key, $rep_save{$key});
    s/$prepend\Q$from\E$postpend/$to/g;
}

END {
    use Storable;
    store \%rep_save, "'$perlhash'";
}
' -i

function compute-new-string() {
echo "$@"|perl -npe '
BEGIN{
    use Storable;
    %rep_save = %{retrieve("'$perlhash'")};
    $prepend = $ENV{prepend};
    $postpend = $ENV{postpend};
}

for $key (keys %rep_save) {
    my ($from, $to) = ($key, $rep_save{$key});
    s/$prepend$from$postpend/$to/g;
}
'
}

function rename-files() {
    dir=$1
    shift
    (
        cd -- "$dir";
        for x in $(get-files-this-dir); do
            if test -d "$x"; then
                test -L "$x" || rename-files "$x" "$@"
            fi
            if echo "$x"|grep $perl_re -q -i -e "$prepend$1$postpend" || readlink -- "$x" | grep $perl_re -q -i -e "$prepend$1$postpend"; then
                debug doing "$x", the name matched
                y="$(compute-new-string "$x")"

                if test -L "$x"; then
                    new_link=$(compute-new-string "$(readlink -- "$x")")
                    if test "${#change_files[@]}" = 0; then
                        git rm "$x" --cached
                        rm "$x"
                    fi
                    ln -s "$new_link" "$y"
                    git add "$y"
                elif test "$x" != "$y"; then
                    if test "${#change_files[@]}" = 0; then
                        git mv "$x" "$y"
                    else
                        mv "$x" "$y"
                    fi
                fi

            fi
        done
    )
}

rename-files . "$@"
if test "$use_git" = true -a "${#change_files[@]}" != 0; then
    git checkout "${change_files[@]}"
fi
git-interactive-add

rm $tmpf.tmp $tmpf.hash $tmpf
