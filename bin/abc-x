#!/bin/bash
export LANG=C
export LC_ALL=C
export LANGUAGE=C

function ssh() {
    command ssh -o PreferredAuthentications=publickey "$@"
}

if test -e ~/.local-config/etc/abc-x; then
    . ~/.local-config/etc/abc-x
fi

if test $PWD = ~/src/linux; then
    git diff HEAD | time abc -t remote-abc -x build-request -m kernel -p kernel -b icesky-rom "$@"
    exit
fi

. $(lookup-file build/envsetup.sh) >/dev/null 2>&1

repo-cherry-find-all() {
    command abc -t remote-abc repo-cherry-find-all \
            -f $(cd $(lookup-file bionic); git-choose-branch -p from remotes | perl -npe 's,.*?remotes/.*?/,,') \
            -t $(cd $(lookup-file bionic); git-choose-branch -p to remotes | perl -npe 's,.*?remotes/.*?/,,') -b $(abc-base-build)
}

function abc() {
    (
        case "$1" in
            help)
                abc-help
                ;;
            mm)
                shift;
                abc-mm "$@" | tee ~/tmp/abc-x.mm
                echo
                if yes-or-no-p -y "push the above files"; then
                    cat ~/tmp/abc-x.mm | perl -ne 'print if m/<<XXX/../^XXX/'|bash
                fi
                ;;
            grep)
                shift
                abc-grep "$@"
                ;;
            tags)
                shift
                abc-tags "$@"
                ;;
            abc-files)
                shift
                abc-files "$@"
                ;;
            base)
                abc-base-build
                ;;
            *)
                die "no such abc-x command: $1"
                ;;
        esac
    )
}

abc-help() {
    cat <<EOF

Run commands with Android Build Center. The following commands are
supported:

    abc mm: run mm command to build the modules in the current
        directory in Android Build Center.

    abc grep: run grep with the help of Android Build Center. For e.g.,
        adb grep -e "readlink"
EOF
}

abc-mm() {

    if git status -s|grep '??'; then
        git status -s | awk '{print $2}' | xargs -d \\n git add
    fi

    base_build=${base_build:-$(abc-base-build)}
    repo_path=$(abc-repo-path)

    local method=mm
    if test "$repo_path" = kernel; then
        method=kernel
    elif test "$repo_path" = bootable/bootloader/lk; then
        method=lk
    fi

    remote_rev=$(abc-repo-revision)
    if test -z "$remote_rev"; then
        echo "Something went wrong with abc remote revision"
        return 1
    fi
    if ! git log "$remote_rev" -1 >/dev/null 2>&1; then
        echo "Seems abc base revision $remote_rev not found in your local repo, maybe run 'repo sync -n .'?"
        return 1
    fi

    git diff --binary $(abc-repo-revision) | ssh $abc_host abc $xdebug build-request -m $method -d $(abc-repo-pwd) -b "$base_build" -p $repo_path "$@"
}

abc-repo-revision() {
    ssh $abc_host abc repo-revision -b "${base_build:-$(abc-base-build)}" -p "${repo_path:-$(abc-repo-path)}"
}

croot() {
    root_dir=$(lookup-file -e .repo/..)
    cd $root_dir
}

abc-base-build() {
    . ~/src/github/smartcm/smartcm-setup.sh
    my_base=$(
        if test "$base_build"; then
            echo $base_build
            exit
        fi
        (
            croot
            readlink -f ./.repo/manifest.xml|perl -npe 's,.*.repo/manifests/,,; s,\.xml$,,; s,/,%,g'
        )
           )
    for product_branch in ${!android_manifests[@]} ${!oem_manifests[@]} ${!old_android_manifests[@]}; do
        for manifest in ${android_manifests[$product_branch]} ${oem_manifests[$product_branch]} ${old_android_manifests[$product_branch]}; do
            base_from_manifest=$(
                echo ${manifest} | perl -npe 's/.xml$//; s,/,%,g'
                              )
            if test "$my_base" = "$base_from_manifest"; then
                echo "$my_base"
                return
            fi
        done
    done

    if test "$my_base"; then
        echo "在system-config的smartcm配置里找不到你的repo xml配置：$my_base，可能需要升级system-config" >/dev/stderr
        if is-in-emacs || yes-or-no-p -y </dev/tty "继续使用$my_base搜索？"; then
            echo "$my_base"
            return
        fi
    fi

    product_branch=$(select-args -i -dev </dev/tty -o -p "请选择你想使用的代码索引的产品、分支" ${!android_manifests[@]} ${!oem_manifests[@]})
    android_or_oem=$(
        select-args </dev/tty -o -p "请选择你要搜索安卓代码还是OEM代码" android oem
                  )
    if test "$android_or_oem" = android; then
        manifest=${android_manifests[$product_branch]}
    else
        manifest=${oem_manifests[$product_branch]}
    fi

    if test -z "$manifest"; then
        echo "抱歉，你选的产品、分支 $product_branch 没有 $android_or_oem 部分代码" 1>&2
        kill $$
    fi
    echo ${manifest} | perl -npe 's/.xml$//; s,/,%,g'
}

abc-grep() {
    (
        croot
        ## start code-generator "^\\s *#\\s *"
        # generate-getopt e:entry rremote ttags b:base-build ssilent
        ## end code-generator
        ## start generated code
        TEMP=$(getopt -o tb:e:rsh \
                      --long tags,base-build:,entry:,remote,silent,help,no-tags,no-remote,no-silent \
                      -n $(basename -- $0) -- "$@")
        tags=false
        base_build=
        entry=
        remote=false
        silent=false
        eval set -- "$TEMP"
        while true; do
            case "$1" in

                -t|--tags|--no-tags)
                    if test "$1" = --no-tags; then
                        tags=false
                    else
                        tags=true
                    fi
                    shift
                    ;;
                -b|--base-build)
                    base_build=$2
                    shift 2
                    ;;
                -e|--entry)
                    entry=$2
                    shift 2
                    ;;
                -r|--remote|--no-remote)
                    if test "$1" = --no-remote; then
                        remote=false
                    else
                        remote=true
                    fi
                    shift
                    ;;
                -s|--silent|--no-silent)
                    if test "$1" = --no-silent; then
                        silent=false
                    else
                        silent=true
                    fi
                    shift
                    ;;
                -h|--help)
                    set +x
                    echo
                    echo
                    echo Options and arguments:
                    printf %06s '-b, '
                    printf %-24s '--base-build=BASE_BUILD'
                    echo
                    printf %06s '-e, '
                    printf %-24s '--entry=ENTRY'
                    echo
                    printf %06s '-r, '
                    printf %-24s '--[no-]remote'
                    echo
                    printf %06s '-s, '
                    printf %-24s '--[no-]silent'
                    echo
                    printf %06s '-t, '
                    printf %-24s '--[no-]tags'
                    echo
                    exit
                    shift
                    ;;
                --)
                    shift
                    break
                    ;;
                *)
                    die "internal error: $(. bt; echo; bt | indent-stdin)"
                    ;;
            esac
        done


        ## end generated code

        if test -z "$entry" -a $# != 0; then
            entry=$1
            shift
        fi
        if test -z "$entry"; then
            (
                echo -n 'abc-x grep 用法错误： '
                abc-x grep -h
            )
            echo
            echo 注意：-e ENTRY 也可以不写-e，前提是ENTRY不以-开头（与grep -e参数用法类似）。
            exit 1
        fi

        echo "make: Entering directory \`$PWD'"
        if test "$remote" = true; then
            echo "$entry" | ssh $abc_host abc abc-beagrep -b "$(abc-base-build)" | grep -v '^Using short format'
            exit
        fi

        if test "$tags" = true; then
            echo "$entry" | ssh $abc_host abc abc-grep-beatags -b "$(abc-base-build)"
            exit
        fi

        ssh $abc_host abc abc-files -b "$(abc-base-build)" "$(echo "$entry" | perl -npe 's/[^\w]/ /g')"|grep .|
            if test "$silent" = true; then
                while read f; do
                    if test -e "$f"; then
                        echo "$f"
                    fi
                done
            else
                cat
            fi | xargs -d \\n grep -H -n -e "$entry" "$@" /dev/null
    )
}

abc-tags() {
    (
        croot
        echo "make: Entering directory \`$PWD'"
        ## start code-generator "^\\s *#\\s *"
        # generate-getopts -l e:entry
        ## end code-generator
        ## start generated code
        local entry=
        local OPTIND=1
        while getopts 'e:' opt; do
            case "$opt" in
                e)    entry=$OPTARG;;
                *)    echo Usage Error;;
            esac
        done
        shift $(($OPTIND - 1))

        ## end generated code

        if test -z "$entry" -a $# != 0; then
            entry=$1
            shift
        fi

        ssh $abc_host abc abc-tags -b "$(abc-base-build)" "$(echo "$entry" | perl -npe 's/[^\w]/ /g')"
    )
}

abc-files() {
    (
        croot
        ssh $abc_host abc abc-files -b "$(abc-base-build)" "$(echo "$@" | perl -npe 's/[^\w]/ /g')"
    )
}

abc-repo-branch() {
    repo forall $(repo-project) -c 'echo $REPO_RREV'
    # fixme
}

abc-repo-path() {
    repo forall $(repo-project) -c 'echo $REPO_PATH'
}

abc-repo-pwd() {
    pwd=$(PWD= /bin/pwd)
    top=$(gettop)
    echo ${pwd:${#top}+1}
}

## start code-generator "^\\s *#\\s *"
# generate-getopts  h:abc_host xxdebug b:base_build
## end code-generator
## start generated code
abc_host=
xdebug=false
base_build=
OPTIND=1
while getopts 'h:xb:' opt; do
    case "$opt" in
        h)    abc_host=$OPTARG;;
        x)    xdebug=true;;
        b)    base_build=$OPTARG;;
        *)    echo Usage Error; exit 2;;
    esac
done
shift $(($OPTIND - 1))

## end generated code

if test -z "$abc_host"; then
    abc_host=abc@172.16.2.25
fi

if test $xdebug = true; then
    xdebug=-x
else
    xdebug=
fi

if test $# = 0; then
    abc mm
elif test "$1" = mm; then
    abc "$@"
elif test "$1" = sync-qc-oems; then
    abc_host='jenkins@build1 -p 21604'
    ssh $abc_host abc "$@"
elif test "$1" = sync-simt-repos; then
    ssh -t $abc_host abc "$@"
elif test "$(type -t "$1")" = function; then
    "$@"
else
    abc "$@"
fi
