#!/bin/bash
set -e

function repo-info-from-manifest() {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopt m:manifest-xml u:manifest-project
    ## end code-generator
    ## start generated code
    TEMP=$( getopt -o u:m:h \
                   --long manifest-project:,manifest-xml:,help \
                   -n $(basename -- $0) -- "$@")
    declare manifest_project=
    declare manifest_xml=
    eval set -- "$TEMP"
    while true; do
        case "$1" in

            -u|--manifest-project)
                manifest_project=$2
                shift 2

                ;;
            -m|--manifest-xml)
                manifest_xml=$2
                shift 2

                ;;
            -h|--help)
                set +x
                echo -e
                echo
                echo Options and arguments:
                printf %06s '-u, '
                printf %-24s '--manifest-project=MANIFEST_PROJECT'
                echo
                printf %06s '-m, '
                printf %-24s '--manifest-xml=MANIFEST_XML'
                echo
                exit
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                die "internal error: $(. bt; echo; bt | indent-stdin)"
                ;;
        esac
    done


    ## end generated code

    if test -z "${manifest_xml}"; then
        manifest_xml=.repo/manifest.xml
    fi

    if test ! -e ${manifest_xml}; then
        if test -e .repo/manifests/${manifest_xml}; then
            manifest_xml=.repo/manifests/${manifest_xml}
        else
            die "Can't find manifest.xml"
        fi
    fi

    if test -z "${manifest_project}"; then
        manifest_project=$(
            cd .repo/manifests
            git-remote-url | perl -pe 's,.*?//.*?/,,'
                        )
    fi


    repo_project_attrs=(
        name path remote revision upstream
    )

    clear-all() {
        for x in ${repo_project_attrs[@]}; do
            unset $x
        done
    }

    (
        echo declare -A repo_xml_remote_fetch_map repo_xml_project_info_map

        repo-xml-sel sel -t -m /manifest/remote -o "repo_xml_remote_fetch_map[" -v @name -o "]='" -v @fetch -o \' -n "${manifest_xml}"
        repo-xml-sel sel -t -m /manifest/default -o repo_xml_default_remote= -v @remote -n -o repo_xml_default_revision= -v @revision -n "${manifest_xml}"

        echo "EOH"

        repo-xml-sel sel -t -m "/manifest/project" \
                     $(
            for x in ${repo_project_attrs[@]}; do
                printf -- '-o %s= -v @%s -n ' $x $x
            done
                     ) \
                         -o "EOR" -n "${manifest_xml}"
    ) | (
        is_mirror=$(
            cd .repo/manifests
            git config repo.mirror || true
                 )
        clear-all
        while read -r line; do
            if test "$line" != EOH; then
                eval "${line}"
            else
                break
            fi
        done

        for r in "${!repo_xml_remote_fetch_map[@]}"; do
            if !  [[ ${repo_xml_remote_fetch_map[$r]} =~ ^(\.\./)?\.\./?$ ]]; then
                die "We can't handle remote fetch other than .. or ../.."
            fi
        done

        declare -A remote_prefix_map
        get-project-prefix-for-remote() {
            local remote_fetch=$1
            if test -v remote_prefix_map[$remote_fetch]; then
                echo -n ${remote_prefix_map[$remote_fetch]}
                return 0
            fi

            project_prefix=$(
                tmpdir=/tmp/repo-info-from-manifest.$$
                . atexit rm -rf $tmpdir
                mkdir -p ${tmpdir}
                cd ${tmpdir}
                mkdir -p ${manifest_project}
                cd ${manifest_project}
                cd .. # it's relative to the parent of the manifest project
                cd ${remote_fetch}
                if [[ ${PWD} =~ ^${tmpdir} ]]; then
                    echo ${PWD#${tmpdir}}|perl -pe 's,^/,,'
                else
                    die "Can't find project prefix for ${remote_fetch}"
                fi
                          )
            remote_prefix_map[$remote_fetch]=${project_prefix}
            echo ${project_prefix}
        }

        declare -A repo_project_paths
        while read -r line; do
            if test "${line}" != EOR; then
                eval "${line}"
            else
                if test -z "$path"; then
                    path=$name
                elif test -z "$name"; then
                    name=$path
                fi

                if test "${is_mirror}" = true; then
                    path=$name.git
                fi

                repo_project_paths[$path]=1

                if test -z "${revision}"; then
                    revision=${repo_xml_default_revision}
                elif [[ $revision =~ [0-9a-f]{40} ]]; then
                    repo_xml_project_info_map[@revision-$path]=$revision
                    revision=${upstream:-${repo_xml_default_revision}}
                fi

                repo_xml_project_info_map[@upstream-$path]=$upstream

                if test -z "${remote}"; then
                    remote=${repo_xml_default_remote}
                fi
                # echo remote is $remote for $path: ${repo_xml_remote_fetch_map[$remote]} 1>&2

                repo_xml_project_info_map[@remote-$path]=$remote

                if test -z "${repo_xml_remote_fetch_map[$remote]}"; then
                    die "Can't find fetch setting for remote $remote"
                fi

                repo_xml_project_info_map[@project-$path]=$(
                    get-project-prefix-for-remote "${repo_xml_remote_fetch_map[$remote]%/}"
                                         )$name

                repo_xml_project_info_map[@branch-$path]=$revision
                clear-all
            fi
        done
        declare -p repo_xml_project_info_map
        declare -p repo_project_paths
    )

}

if test "$(readlink -f "$BASH_SOURCE")" = "$(readlink -f "$(echo "$0" | grep / || which "$0" 2>/dev/null)" )"; then
    "$(basename $0)" "$@"
else
    # we are being sourced.
    repo-info-from-manifest "$@" > /tmp/repo-info.$$
    . /tmp/repo-info.$$
    rm -f /tmp/repo-info.$$
    return 0
fi
